<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engine | Aschenblog]]></title>
  <link href="http://nick-aschenbach.github.io/blog/categories/engine/atom.xml" rel="self"/>
  <link href="http://nick-aschenbach.github.io/"/>
  <updated>2015-12-22T11:33:58-08:00</updated>
  <id>http://nick-aschenbach.github.io/</id>
  <author>
    <name><![CDATA[Nick Aschenbach]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Engine API Endpoint Authentication Using Rack Middleware]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/04/07/rails-engine-api-endpoint-authentication/"/>
    <updated>2015-04-07T22:28:10-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/04/07/rails-engine-api-endpoint-authentication</id>
    <content type="html"><![CDATA[At work, we recently discussed how best to authenticate an API endpoint that we needed from a rails engine. In the host
application, we require that clients use tokens for API authentication. In a parent class before filter, we call a
remote web service to validate these tokens. We all agreed that it was a bad idea to copy this code over from the host
into the engine.

There were a couple of reasons for this. Not only would the code be duplicated, but we felt like it would be a better
separation of concerns to keep authentication out of the engine. Another argument is that we would not want
to impose an authentication system from the gem on the host application. Ryan Bigg expands on this in a
[blog post](http://ryanbigg.com/2012/03/engines-and-authentication/) on Forem.

<!-- more -->

We investigated a handful of approaches. The simplest, least invasive approach seemed to be to use Rack middleware.
First, we register the middleware with an array of endpoints to validate:

<figure class='code'><figcaption><span>application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Middleware</span><span class="o">::</span><span class="no">TokenAuthorizer</span><span class="p">,</span> <span class="o">[&amp;</span><span class="c1">#8216;api/accounts/&amp;#8217;]</span>
</span></code></pre></td></tr></table></div></figure>

Then we define the middleware:

<figure class='code'><figcaption><span>token_authorizer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Middleware</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">TokenAuthorizer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">validation_endpoints</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>      <span class="vi">@validation_endpoints</span> <span class="o">=</span> <span class="n">validation_endpoints</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">unauthorized</span> <span class="k">if</span> <span class="n">need_to_validate?</span><span class="p">(</span><span class="n">env</span><span class="o">[&amp;</span><span class="c1">#8216;PATH_INFO&amp;#8217;]) &amp;&amp; invalid_token?(env[&amp;#8216;HTTP_AUTHORIZATION&amp;#8217;])</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">need_to_validate?</span><span class="p">(</span><span class="n">request_path</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@validation_endpoints</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">validation_endpoint</span><span class="o">|</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">request_path</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">validation_endpoint</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">invalid_token?</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">token</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="o">!</span><span class="no">WebServices</span><span class="o">::</span><span class="no">TokenAuth</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">is_valid_token?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">unauthorized</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">401</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[&amp;</span><span class="c1">#8216;Unauthorized&amp;#8217;]]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

In most cases, we will just end up executing calling the host application (via `@app.call(env)`). However if the
`PATH_INFO` matches an initialized endpoint and we pass in an invalid token, then we will return a `401` HTTP status
code.

There are a few drawbacks to this approach:

- We do not take into the HTTP verb into account and may match more endpoints than we intend (e.g. api/accounts/:account_identifier)
- The middleware runs for all requests, even ones where we have a separate authentication mechanism]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freebase Astronomy Gems]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/01/29/freebase-astronomy-gem/"/>
    <updated>2015-01-29T20:34:04-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/01/29/freebase-astronomy-gem</id>
    <content type="html"><![CDATA[With 47 million topics and 2.7 billion facts, Freebase has an imposing amount of community curated data.
Unfortunately, they are [closing up shop](https://plus.google.com/109936836907132434202/posts/bu3z2wVqcQc) by mid 2015.
Their plan is to help support the up and coming Wikimedia Foundation's project [Wikidata](http://www.wikidata.org/) by
assisting in transferring their data to this project. Given the short amount of time they are online, I wanted
to do a small project using their data sets.

I am interested in astronomy, but found the Freebase JSON data a little unwieldy. I decided to write a pair gems:

- The `astronomy` gem facilitates browsing and search of astronomical phenomena. Each topic includes a name,
description, an array of image URLs and a link to the original detailed Freebase data via Google APIs.
- The `astronomy_engine` wraps the `astronomy` gem and has a web interface and can easily be included
in a Rails project:

[<img src="/assets/2015-01-29-freebase-astronomy-gem/images/astronomy_engine.jpg" title="auto auto" >](/assets/2015-01-29-freebase-astronomy-gem/images/astronomy_engine.jpg)

<!-- more -->

Add the following to your `config/routes.rb` in your rails app:

&#8220;`ruby
Rails.application.routes.draw do
  mount AstronomyEngine::App => &#8216;/astronomy&#8217;
&#8220;`

This adds the web page at the root and adds a few additional routes.

Request the list of categories:

&#8220;`bash
curl {APPLICATION_ROOT}/astronomy/categories
&#8220;`

Request all topics for a given category:

&#8220;`bash
curl {APPLICATION_ROOT}/astronomy/categories/Star/topics
&#8220;`

Search all topic names and descriptions:

&#8220;`bash
curl {APPLICATION_ROOT}/astronomy/topics?q=cluster
&#8220;`

I have a [sample web app](http://astronomy-engine.herokuapp.com/) on Heroku available if you want to take a look.
Here are the Github pages for the [astronomy](https://github.com/nick-aschenbach/astronomy) gem and
[astronomy_engine](https://github.com/nick-aschenbach/astronomy-engine) gem.

Resources:

- Amazon makes a handful of [Freebase Data Dumps](https://aws.amazon.com/search?searchQuery=freebase) freely available.
Also they several other [public data sets](https://aws.amazon.com/datasets/).
- Wikidata [data dumps](http://dumps.wikimedia.org/) are also available.]]></content>
  </entry>
  
</feed>
