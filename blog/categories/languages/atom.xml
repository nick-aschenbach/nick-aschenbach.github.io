<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Languages | Aschenblog]]></title>
  <link href="http://nick-aschenbach.github.io/blog/categories/languages/atom.xml" rel="self"/>
  <link href="http://nick-aschenbach.github.io/"/>
  <updated>2016-01-18T12:40:27-08:00</updated>
  <id>http://nick-aschenbach.github.io/</id>
  <author>
    <name><![CDATA[Nick Aschenbach]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jRuby Test Drive]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/03/14/getting-started-with-jruby/"/>
    <updated>2015-03-14T09:09:13-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/03/14/getting-started-with-jruby</id>
    <content type="html"><![CDATA[After hearing about jRuby on several Ruby Rogues podcasts and reading posts about it online, I wanted to give it a shot.

Installation is super easy if you use [rvm](https://rvm.io/):

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">rvm</span> <span class="nx">install</span> <span class="nx">jruby</span>
</span></code></pre></td></tr></table></div></figure>

This will install several dependencies (like the patch, gawk, g++ and the JDK if you do not already have them
installed). The installation and setup took about seven minutes on a clean Ubuntu 12.04 Vagrant box I spun up for
testing purposes.

Let&#8217;s say hello in irb:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span> <span class="o">&amp;</span><span class="c1">#8216;Hello World!&amp;#8217;</span>
</span><span class='line'><span class="no">Hello</span> <span class="no">World</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>

Specifying the package is a little cumbersome. Importing the `java.lang.System` makes things a little easier:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">System</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span> <span class="o">&amp;</span><span class="c1">#8216;Hello World!&amp;#8217;</span>
</span><span class='line'><span class="no">Hello</span> <span class="no">World</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>

<!-- more -->

jRuby provides access to Java&#8217;s rich API and large number of open source packages. The runtime performance is
approximately the same, however the memory consumption appears to be higher for jRuby programs according to a
[2014 survey](http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&lang=jruby&lang2=yarv&data=u64q).
It should be noted that the JVM startup time is excluded in these benchmarks so as not to bias the results. However,
it is not inconsequential. I understand that JVM start time for some test suites can take several seconds for larger
projects, which can be painful when running regression tests.

One of the main drawbacks to concurrent programming in MRI Ruby is that threads cannot run in parallel. These are
are useful when blocking on input and output, for example. However, gems that use native C code can provide
multi-threading facilities (e.g. by using POSIX threads). Another issue with MRI Ruby is that a number of data
structures are not thread safe (with the exception of the `Queue` class).

jRuby provides access to `java.lang.Thread` which enables running multiple threads of execution concurrently
on multiple cores. There appear to be some notable drawbacks in jRuby. Because the code runs on the JVM, we are
precluded from using gems with native code. These gems need to be swapped out with
[alternatives](https://github.com/jruby/jruby/wiki/C-Extension-Alternatives). Another issue is that jRuby is several
versions behind MRI Ruby. The latest jRuby release at the time this was written is `1.7.19`, which was to shore up
compatibility with MRI Ruby version `1.9.3`.

Threads are much cheaper to spin up than processes. Access to native threads in jRuby may help developers to scale
applications by better utilizing the hardware. Use of multiple threads of execution is a natural fit for web servers,
which need to handle multiple client connections concurrently.

**Test Drive**

Let&#8217;s take jRuby out for a spin with a hello world example that utilizes `JFrame`:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JButton</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloFrame</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setup_interface</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup_interface</span>
</span><span class='line'>    <span class="n">button</span> <span class="o">=</span> <span class="no">JButton</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">button</span><span class="o">.</span><span class="n">addActionListener</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Hello World&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="no">JFrame</span><span class="o">::</span><span class="no">EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setSize</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setLocationRelativeTo</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">HelloFrame</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>

If you save this as a file called `hello.rb` then it can be run from the command line by:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby hello.rb
</span></code></pre></td></tr></table></div></figure>

Here is the app in action:

<img src="/assets/2015-03-14-getting-started-with-jruby/images/hello.png" width="300" height="200">

The action listener `do &#8230; end` Ruby syntax is quite a bit cleaner than the Java alternative using an anonymous inner
class:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ActionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>

Taking what I learned and hungry for more, I decided to write a minimal web browser using jRuby. The interface is
comprised of a `JTextField` to input the URI and a `JEditorPane` to render the HTML. In addition, I use `BorderLayout`
as the layout manager for the `JFrame`:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JScrollPane</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JTextField</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JEditorPane</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">BorderLayout</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Browser</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="s1">&#39;jRuby Browser&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">initialize_interface</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize_interface</span>
</span><span class='line'>    <span class="n">response_body</span> <span class="o">=</span> <span class="no">JEditorPane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;text/html&#39;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uri_input</span> <span class="o">=</span> <span class="no">JTextField</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uri_input</span><span class="o">.</span><span class="n">add_action_listener</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="n">response_body</span><span class="o">.</span><span class="n">setPage</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">getActionCommand</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="no">BorderLayout</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">uri_input</span><span class="p">,</span> <span class="no">BorderLayout</span><span class="o">::</span><span class="no">NORTH</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="no">JScrollPane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">response_body</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setSize</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">600</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setLocationRelativeTo</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="no">JFrame</span><span class="o">::</span><span class="no">EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Browser</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>

While `JEditorPane` HTML support is very limited, we are able to display the webpage data for `example.com`. I resized
the window here to show the scrollbars:

<img src="/assets/2015-03-14-getting-started-with-jruby/images/browser.png" width="800" height="300">]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popularity Trends in Programming Languages]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/08/02/programming-languages-popularity-trends/"/>
    <updated>2014-08-02T11:18:06-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/08/02/programming-languages-popularity-trends</id>
    <content type="html"><![CDATA[Full disclosure: I am a Ruby and Java developer. 

Everyone has their favorite pet languages (myself included) and I realize that this is a topic that evokes some feelings among my peers. In recent years, I strove to be more agnostic about tools and languages. While I try to be careful about making predictions, the languages and tools that are relevant now may fall out of favor in the industry in a few years. I'll try stick to what I discovered, but I realize that my perception is colored by my experience.

I reviewed several indexes and articles including [TIOBE](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html), [Transparent Language Popularity Index](http://lang-index.sourceforge.net/), [IEEE Spectrum: Top Programming Languages](http://spectrum.ieee.org/static/interactive-the-top-programming-languages), [PopularitY of Programming Language Index](https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language), [RedMonk Programming Language Rankings](http://redmonk.com/sogrady/2014/01/22/language-rankings-1-14/), [Programming Language Popularity Chart](http://langpop.corger.nl/) and [GitHub Language Trends and Fragmenting Landscape](http://redmonk.com/dberkholz/2014/05/02/github-language-trends-and-the-fragmenting-landscape/)

While there was correlation between highly ranked languages between the indexes, none of them were the same. Several metrics were used including number of open source projects, number of lines of code, number of tracked bugs / issues, number of tutorials and numbers of search engine searches. The list goes on and on. How these metrics were weighted had a big impact on the overall ranking results. 

<img class="left" src="http://dberkholz-media.redmonk.com/dberkholz/files/2014/05/github_new_users_repos_issues_multiplot_composite_simple.png" width="450" title="auto New GitHub Repos" >

In alphabetical order some of the most highly ranked languages are C, C#, C++, Java, JavaScript, Objective-C, PHP, Perl, Python, Ruby and Visual Basic. About half the indexes I reviewed had C and Java in the top two spots. 

<!-- more -->

Because there is no objective measurement of programming language popularity, the exact rank seemed less important to me than how things [change over time](http://redmonk.com/dberkholz/2014/05/02/github-language-trends-and-the-fragmenting-landscape/) (see graph). Another approach that I liked was the use of [scatter plots](http://sogrady-media.redmonk.com/sogrady/files/2014/01/lang-rank-114-wm.png).

I found Donnie Berkholz&#8217;s analysis of programming language use on GitHub particularly insightful. He looks at new GitHub repos, new issues and new users as a function of time. Before we go deeper into the numbers, it is important to mention that GitHub was embraced by the Ruby community early on and the apparent drop in Ruby projects actually indicates that GitHub was adopted by the developer community at large over the past five years. 

Overall language trends (looking at GitHub issues):

- While JavaScript issues are increasing, the trend is decelerating. It may stabilize at around 25% of total issues on GitHub
- Ruby has seen a big decline and appears to be reaching 10% of issues
- Java and PHP have stabilized at 10% of issues
- Python has dropped from 15% to about 10% of issues since 2008/2009. It&#8217;s unclear if this number has stabilized.

He also points out that C# and Objective-C are widely used, but do not show up in his data because developers from those communities have not embraced GitHub to the same degree as some others. This is corroborated by [data](http://langpop.corger.nl/) that indicates while C# is discussed widely on Stack Overflow, it is not correlated as strongly with lines of code on GitHub as are other languages like Java and JavaScript:

Language    | Stack Overflow | GitHub          | Ratio
&#8212;&#8212;&#8212;&#8211; | &#8212;&#8212;&#8212;&#8212;&#8211; | &#8212;&#8212;&#8212;&#8212;&#8212;-|&#8212;&#8212;-
C#          | 679,776        | 2,469,334,797   | 3,632
Java        | 687,426        | 7,090,897,887   | 10,315
JavaScript  | 676,383        | 15,664,918,541  | 23,160
<br/>

The ratio is the number of lines of code on GitHub relative to the number of Stack Overflow comments. All three languages have a similar number of comments on Stack, but have very different ratios. 

The article closes by suggesting that we have moved towards an increasingly fragmented programming language landscape. With the rise of domain specific languages and the increasing reliance on web technologies, it will be fascinating to see what programming languages will dominate in the future.
]]></content>
  </entry>
  
</feed>
