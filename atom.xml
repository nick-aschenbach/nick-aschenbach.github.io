<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aschenblog]]></title>
  <link href="http://nick-aschenbach.github.io/atom.xml" rel="self"/>
  <link href="http://nick-aschenbach.github.io/"/>
  <updated>2015-12-22T11:39:58-08:00</updated>
  <id>http://nick-aschenbach.github.io/</id>
  <author>
    <name><![CDATA[Nick Aschenbach]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Let It Snow With the Accuweather Gem]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/12/08/let-it-snow-with-accuweather-gem/"/>
    <updated>2015-12-08T22:09:29-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/12/08/let-it-snow-with-accuweather-gem</id>
    <content type="html"><![CDATA[<p>AccuWeather is one of the standard widgets on my Android phone. I found no API wrapper for it after
searching <a href="https://rubygems.org">rubygems.org</a> and I thought it would be fun to write one after spending a little time
reverse engineering the web API (<a href="http://nick-aschenbach.github.io/blog/2015/10/15/reverse-engineering-web-apis-using-mobile-apps/">related post</a>).</p>

<p><img class="left" src="http://nick-aschenbach.github.io/assets/2015-12-08-let-it-snow-with-accuweather/images/accuweather.png" width="250" title="auto" ></p>

<p>First, find a location via the city search API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;accuweather&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">locations</span> <span class="o">=</span> <span class="no">Accuweather</span><span class="o">.</span><span class="n">city_search</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;vancouver&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns a list of locations that match the input. Each location provides several pieces of information including
a city identifier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">vancouver</span> <span class="o">=</span> <span class="n">locations</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="n">vancouver</span><span class="o">.</span><span class="n">id</span>        <span class="c1"># =&gt; &#39;cityId:53286&#39;</span>
</span><span class='line'><span class="n">vancouver</span><span class="o">.</span><span class="n">city</span>      <span class="c1"># =&gt; &#39;Vancouver&#39;</span>
</span><span class='line'><span class="n">vancouver</span><span class="o">.</span><span class="n">state</span>     <span class="c1"># =&gt; &#39;Canada (British Columbia)&#39;</span>
</span><span class='line'><span class="n">vancouver</span><span class="o">.</span><span class="n">latitude</span>  <span class="c1"># =&gt; &#39;49.2448&#39;</span>
</span><span class='line'><span class="n">vancouver</span><span class="o">.</span><span class="n">longitude</span> <span class="c1"># =&gt; &#39;123.1154&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The gem caches over 175K cities around the world. If the location <code>name</code> is not in the cache, the gem will
make a HTTP request to AccuWeather to try and find it.</p>

<p>The location identifier is used to get more information about current weather conditions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">current_weather</span> <span class="o">=</span> <span class="no">Accuweather</span><span class="o">.</span><span class="n">get_conditions</span><span class="p">(</span><span class="ss">location_id</span><span class="p">:</span> <span class="s1">&#39;cityId:53286&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">current</span>
</span><span class='line'><span class="n">current_weather</span><span class="o">.</span><span class="n">temperature</span>    <span class="c1"># =&gt; &#39;41&#39;</span>
</span><span class='line'><span class="n">current_weather</span><span class="o">.</span><span class="n">weather_text</span>   <span class="c1"># =&gt; &#39;Partly Sunny&#39;</span>
</span><span class='line'><span class="n">current_weather</span><span class="o">.</span><span class="n">pressure</span>       <span class="c1"># =&gt; &#39;30.35&#39;</span>
</span><span class='line'><span class="n">current_weather</span><span class="o">.</span><span class="n">humidity</span>       <span class="c1"># =&gt; &#39;43%&#39;</span>
</span><span class='line'><span class="n">current_weather</span><span class="o">.</span><span class="n">cloud_cover</span>    <span class="c1"># =&gt; &#39;40%&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A week of day and nighttime forecasts are available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">weather_forecast</span> <span class="o">=</span> <span class="no">Accuweather</span><span class="o">.</span><span class="n">get_conditions</span><span class="p">(</span><span class="ss">location_id</span><span class="p">:</span> <span class="s1">&#39;cityId:53286&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">forecast</span>
</span><span class='line'><span class="n">last_forecast_day</span> <span class="o">=</span> <span class="n">weather_forecast</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="n">last_forecast_day</span><span class="o">.</span><span class="n">date</span>        <span class="c1"># =&gt; &quot;12/3/2015&quot;</span>
</span><span class='line'><span class="n">last_forecast_day</span><span class="o">.</span><span class="n">day_of_week</span> <span class="c1"># =&gt; &quot;Thursday&quot;</span>
</span><span class='line'><span class="n">last_forecast_day</span><span class="o">.</span><span class="n">sunrise</span>     <span class="c1"># =&gt; &quot;7:49 AM&quot;</span>
</span><span class='line'><span class="n">last_forecast_day</span><span class="o">.</span><span class="n">sunset</span>      <span class="c1"># =&gt; &quot;4:16 PM&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the dates, daytime high and nighttime low temperatures</span>
</span><span class='line'><span class="n">weather_forecast</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:date</span><span class="p">)</span>                             <span class="c1">#  =&gt; [&quot;11/27/2015&quot;, &quot;11/28/2015&quot;, &quot;11/29/2015&quot;, &quot;11/30/2015&quot;, &quot;12/1/2015&quot;, &quot;12/2/2015&quot;, &quot;12/3/2015&quot;]</span>
</span><span class='line'><span class="n">weather_forecast</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:daytime</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:high_temperature</span><span class="p">)</span>  <span class="c1"># =&gt; [&quot;45&quot;, &quot;45&quot;, &quot;47&quot;, &quot;44&quot;, &quot;44&quot;, &quot;48&quot;, &quot;48&quot;]</span>
</span><span class='line'><span class="n">weather_forecast</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:nighttime</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:low_temperature</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;27&quot;, &quot;28&quot;, &quot;31&quot;, &quot;32&quot;, &quot;40&quot;, &quot;42&quot;, &quot;36&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The API returns a <code>weather_icon</code> number for the current weather and forecast. This number appears to correspond to PNG
file from AccuWeather.com. I downloaded the full set of PNG files and included them here, but found a handful of better
looking weather webfonts out there (links below).</p>

<p>Related resources:</p>

<ul>
<li>Full accuweather icon set (<a href="http://nick-aschenbach.github.io/assets/2015-12-08-let-it-snow-with-accuweather/images/accuweather_icons.zip">download ZIP</a>)</li>
<li><a href="https://erikflowers.github.io/weather-icons/">Weather Icons</a></li>
<li><a href="http://www.alessioatzeni.com/meteocons/">Meteocons</a></li>
</ul>


<p>Accuweather gem links:</p>

<ul>
<li><a href="https://github.com/nick-aschenbach/accuweather">Source code</a></li>
<li><a href="https://rubygems.org/gems/accuweather">RubyGems.org Link</a></li>
</ul>


<p>Stay warm out there and have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source Pirate Swords]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/11/01/pirate-swords/"/>
    <updated>2015-11-01T20:23:37-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/11/01/pirate-swords</id>
    <content type="html"><![CDATA[<p>Every year my work has a competition for who can come up with the best Halloween decorations. My team has the good
fortune of being in a large conference room, which gave us a distinct advantage over the pod layout elsewhere
in the building. Our team&rsquo;s resident creative genius <a href="https://twitter.com/SheenaEllenburg">Sheena</a> came up with
the concept of dead pirates / death in the deep. As a companion to our pirate costumes, I created a basic
pirate sword design with a curved blade:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/sword-collage.jpg" title="auto auto" ></p>

<p>I cut the swords out of a sheet of &frac12;&#8221; cabinet grade plywood. This is important because it has a flat and smooth
pre-finished surface, which I found very easy to prime and spray paint. I used silver metallic paint for the blade
portion and then used a metallic bronze for the hilt. Painters tape was used as masking to provide a sharp line between
the two colors.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/final-sword.jpg" title="auto auto" ></p>

<p>As a final touch, I used a hot glue gun to attach 1/8&#8221; leather cord to the handle of the hilt.</p>

<p>Here are the sword designs in various formats, if you want to make your own:</p>

<ul>
<li><a href="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/sword.3dm">3DM / Rhino</a></li>
<li><a href="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/sword.ai">AI / Illustrator</a></li>
<li><a href="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/sword.dxf">DXF</a></li>
<li><a href="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/sword.dwg">DWG</a></li>
<li><a href="http://nick-aschenbach.github.io/assets/2015-11-01-pirate-swords/images/sword.pdf">PDF</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Engineering Web APIs Using Mobile Apps and a Packet Sniffer]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/10/15/reverse-engineering-web-apis-using-mobile-apps/"/>
    <updated>2015-10-15T21:09:30-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/10/15/reverse-engineering-web-apis-using-mobile-apps</id>
    <content type="html"><![CDATA[<p>Recently I have been having fun using a packet sniffer running on my Android phone to explore non-public APIs. I will
provide a small example using the overstock.com app to look into current Flash Deals. This technique can be used to
monitor a large variety of network traffic running on the phone. The app I used also decrypts SSL packets, which is
useful for viewing HTTPS traffic.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-10-15-reverse-engineering-web-apis-using-mobile-apps/images/packet_capture_install.png" width="250" title="auto" >
<img src="http://nick-aschenbach.github.io/assets/2015-10-15-reverse-engineering-web-apis-using-mobile-apps/images/app_screen.png" width="250" title="auto" >
<img src="http://nick-aschenbach.github.io/assets/2015-10-15-reverse-engineering-web-apis-using-mobile-apps/images/trust_application.png" width="250" title="auto" ></p>

<p>First, I installed <a href="https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture&amp;hl=en">Packet Capture</a> for
Android. The application requires permission to monitor network traffic when you press the <code>Play</code> button. Please do
so at your own risk. Also, this captures a large amount of data, so you might want to limit the length of time it is
running.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-10-15-reverse-engineering-web-apis-using-mobile-apps/images/overstock_install.png" width="250" title="auto" >
<img src="http://nick-aschenbach.github.io/assets/2015-10-15-reverse-engineering-web-apis-using-mobile-apps/images/overstock.png" width="250" title="auto" >
<img src="http://nick-aschenbach.github.io/assets/2015-10-15-reverse-engineering-web-apis-using-mobile-apps/images/packet_capture.png" width="250" title="auto" ></p>

<p>I downloaded the <a href="https://play.google.com/store/apps/details?id=com.overstock&amp;hl=en">Overstock.com</a> Android application,
started it and then started the packet capture. I tapped <code>FLASH DEALS</code> and then stopped the packet capture. The last
image (above right) shows the HTTP request and response that corresponded to my interaction with the application. You may
have to look through a large number of packets to identify the one of interest.</p>

<p>While the response is gzipped, I&rsquo;m more interested in the HTTP request. The first thing I tried was a simple curl
from the command line to reproduce the application:</p>

<pre><code>$ curl http://www.overstock.com/api2/flashdeals/current?offset=0&amp;limit=12
</code></pre>

<p>In some cases, you may need to use the same HTTP request headers (use the <code>-H "&lt;HEADER_KEY&gt;: &lt;HEADER_VALUE&gt;"</code> command
line option) to convince the remote HTTP server that the request was made from their application. However, this was not
needed for the Overstock.com web API. Here is a snippet of the response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;nextHref&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;currentTime&quot;</span><span class="p">:</span><span class="s2">&quot;2015-10-14T23:37:29.399-06:00&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;items&quot;</span><span class="p">:[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">30905</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;offerType&quot;</span><span class="p">:</span><span class="s2">&quot;FIXED_PRICE&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;startDateTime&quot;</span><span class="p">:</span><span class="s2">&quot;2015-10-14T10:00:00.000-06:00&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;endDateTime&quot;</span><span class="p">:</span><span class="s2">&quot;2015-10-15T10:00:00.000-06:00&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;storeId&quot;</span><span class="p">:</span><span class="mi">43</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;departmentId&quot;</span><span class="p">:</span><span class="mi">454</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;categoryId&quot;</span><span class="p">:</span><span class="mi">4540</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;subCategoryId&quot;</span><span class="p">:</span><span class="mi">1399</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;priority&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;skus&quot;</span><span class="p">:[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;fixedPrice&quot;</span><span class="p">:</span><span class="mf">124.99</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;product&quot;</span><span class="p">:{</span>
</span><span class='line'>                  <span class="nt">&quot;productHref&quot;</span><span class="p">:{</span>
</span><span class='line'>                     <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">10181037</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;href&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api/product.json?prod_id=10181037&quot;</span>
</span><span class='line'>                  <span class="p">},</span>
</span><span class='line'>                  <span class="nt">&quot;productName&quot;</span><span class="p">:</span><span class="s2">&quot;Jennifer Taylor Collection Red Moraccan Cotton 3-piece Duvet Cover Set&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nt">&quot;images&quot;</span><span class="p">:{</span>
</span><span class='line'>                     <span class="nt">&quot;thumbnail&quot;</span><span class="p">:</span><span class="s2">&quot;http://ak1.ostkcdn.com/images/products/10181037/T17307668.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;medium&quot;</span><span class="p">:</span><span class="s2">&quot;http://ak1.ostkcdn.com/images/products/10181037/P17307668.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;large&quot;</span><span class="p">:</span><span class="s2">&quot;http://ak1.ostkcdn.com/images/products/10181037/Moracan-Collection-3-piece-Cotton-Duvet-Cover-Set-fd47bab9-10f3-49e2-a431-5ae4cf999abf_1000.jpg&quot;</span>
</span><span class='line'>                  <span class="p">},</span>
</span><span class='line'>                  <span class="nt">&quot;pricing&quot;</span><span class="p">:{</span>
</span><span class='line'>                     <span class="nt">&quot;compareType&quot;</span><span class="p">:</span><span class="s2">&quot;MSRP&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;sellingPrice&quot;</span><span class="p">:</span><span class="mf">124.99</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;comparePrice&quot;</span><span class="p">:</span><span class="mf">352.00</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;onSale&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;discount&quot;</span><span class="p">:</span><span class="mf">227.01</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;savingsPercent&quot;</span><span class="p">:</span><span class="mi">64</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;maxPrice&quot;</span><span class="p">:</span><span class="mf">124.99</span><span class="p">,</span>
</span><span class='line'>                     <span class="nt">&quot;minPrice&quot;</span><span class="p">:</span><span class="mf">124.99</span>
</span><span class='line'>                  <span class="p">},</span>
</span><span class='line'>                  <span class="nt">&quot;reviewInfo&quot;</span><span class="p">:{</span>
</span><span class='line'>                     <span class="nt">&quot;count&quot;</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>               <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>There was a short description, pricing information, image links in three sizes hosted on the CDN and a secondary link:</p>

<pre><code>$ curl http://www.overstock.com/api/product.json?prod_id=10181037
</code></pre>

<p>Here is the full response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">10181037</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jennifer Taylor Collection Red Moraccan Cotton 3-piece Duvet Cover Set&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;meta&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;apiUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api/product.json?prod_id=10181037&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;htmlUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/Bedding-Bath/Jennifer-Taylor-Collection-Red-Moraccan-Cotton-3-piece-Duvet-Cover-Set/10181037/product.html&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;imageBaseUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://ak1.ostkcdn.com/images/products/&quot;</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;sku&quot;</span><span class="p">:</span><span class="s2">&quot;17307668&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;imageThumbnail&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/T17307668.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;imageLarge&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/L17307668.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;imageMedium1&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/P17307668.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;priceSet&quot;</span><span class="p">:[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;label&quot;</span><span class="p">:</span><span class="s2">&quot;MSRP:&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;formattedPrice&quot;</span><span class="p">:</span><span class="s2">&quot;$352.00&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;priceType&quot;</span><span class="p">:</span><span class="s2">&quot;COMPARISON_PRICE&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;label&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;formattedPrice&quot;</span><span class="p">:</span><span class="s2">&quot;$227.01(64%) off&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;priceType&quot;</span><span class="p">:</span><span class="s2">&quot;DISCOUNTED_AMOUNT&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;label&quot;</span><span class="p">:</span><span class="s2">&quot;Sale:&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;formattedPrice&quot;</span><span class="p">:</span><span class="s2">&quot;$124.99&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;priceType&quot;</span><span class="p">:</span><span class="s2">&quot;CURRENT_PRICE&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;messages&quot;</span><span class="p">:[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;message&quot;</span><span class="p">:</span><span class="s2">&quot;Earn $2.50 (2%) Rewards on this product FREE with Club O Silver&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;messageType&quot;</span><span class="p">:</span><span class="s2">&quot;JOIN_CLUBO_SILVER&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;oViewerImages&quot;</span><span class="p">:[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;fd47bab9-10f3-49e2-a431-5ae4cf999abf&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;cdnPath&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/Moracan-Collection-3-piece-Cotton-Duvet-Cover-Set-fd47bab9-10f3-49e2-a431-5ae4cf999abf.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;originalWidth&quot;</span><span class="p">:</span><span class="mi">1024</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;originalHeight&quot;</span><span class="p">:</span><span class="mi">1024</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;imageSizes&quot;</span><span class="p">:[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;imagePath&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/Moracan-Collection-3-piece-Cotton-Duvet-Cover-Set-fd47bab9-10f3-49e2-a431-5ae4cf999abf_320.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;height&quot;</span><span class="p">:</span><span class="mi">320</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;width&quot;</span><span class="p">:</span><span class="mi">320</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;imagePath&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/Moracan-Collection-3-piece-Cotton-Duvet-Cover-Set-fd47bab9-10f3-49e2-a431-5ae4cf999abf_600.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;height&quot;</span><span class="p">:</span><span class="mi">600</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;width&quot;</span><span class="p">:</span><span class="mi">600</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;imagePath&quot;</span><span class="p">:</span><span class="s2">&quot;10181037/Moracan-Collection-3-piece-Cotton-Duvet-Cover-Set-fd47bab9-10f3-49e2-a431-5ae4cf999abf_1000.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;height&quot;</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;width&quot;</span><span class="p">:</span><span class="mi">1000</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;memberPrice&quot;</span><span class="p">:</span><span class="mf">124.99</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;compareAt&quot;</span><span class="p">:</span><span class="mf">250.27</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;categoryId&quot;</span><span class="p">:</span><span class="mi">4540</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;subCategoryId&quot;</span><span class="p">:</span><span class="mi">1399</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;altSubCategoryId&quot;</span><span class="p">:</span><span class="mi">22240</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;shortDescription&quot;</span><span class="p">:</span><span class="s2">&quot;This Moracan Collection duvet set is woven of 100 percent cotton for softness and comfort. Rich blues and oranges in a geometric pattern complete the look. &quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;description&quot;</span><span class="p">:</span><span class="s2">&quot;This reversible duvet cover features a blue and orange geometric design on one side and a solid blue on the other. Crafted of quality cotton, this set is conveniently machine washable.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Includes: 3-piece Set&lt;/li&gt;&lt;li&gt;Reversible Bedding&lt;/li&gt;&lt;li&gt;Material: Cotton&lt;/li&gt;&lt;li&gt;Pattern: Graphic&lt;/li&gt;&lt;li&gt;Color: Red, Orange, Blue&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Queen-size dimensions:&lt;/b&gt;&lt;li&gt;Duvet: 93 inches x 96 inches&lt;/li&gt;&lt;li&gt;Standard sham: 20 inches x 27 inches&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;i&gt;The digital images we display have the most accurate color possible. However, due to differences in computer monitors, we cannot be responsible for variations in color between the actual product and your screen.&lt;/i&gt;&lt;br&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;savingsPercentage&quot;</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;basePrice&quot;</span><span class="p">:</span><span class="mf">124.99</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;hideMAPProductPrice&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;mediaItem&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;mediaReleaseDate&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;clubODiscount&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;nonClubODiscount&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;preRelease&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;priceLabel&quot;</span><span class="p">:</span><span class="s2">&quot;Sale&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;online&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;options&quot;</span><span class="p">:[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;optionId&quot;</span><span class="p">:</span><span class="mi">15463578</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;decription&quot;</span><span class="p">:</span><span class="s2">&quot;N/A&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;qtyOnHand&quot;</span><span class="p">:</span><span class="mi">31</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;maxQuantityAllowed&quot;</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;price&quot;</span><span class="p">:</span><span class="mf">124.99</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;comparePrice&quot;</span><span class="p">:</span><span class="mf">352.00</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;compareType&quot;</span><span class="p">:</span><span class="s2">&quot;MSRP&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;hideMAPProductPrice&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;savings&quot;</span><span class="p">:</span><span class="mf">227.01</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;savingPercentage&quot;</span><span class="p">:</span><span class="mi">64</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;onSale&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;showAmazonPrice&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;priceSet&quot;</span><span class="p">:[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;label&quot;</span><span class="p">:</span><span class="s2">&quot;MSRP:&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;formattedPrice&quot;</span><span class="p">:</span><span class="s2">&quot;$352.00&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;priceType&quot;</span><span class="p">:</span><span class="s2">&quot;COMPARISON_PRICE&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;label&quot;</span><span class="p">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;formattedPrice&quot;</span><span class="p">:</span><span class="s2">&quot;$227.01(64%) off&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;priceType&quot;</span><span class="p">:</span><span class="s2">&quot;DISCOUNTED_AMOUNT&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="nt">&quot;label&quot;</span><span class="p">:</span><span class="s2">&quot;Sale:&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;formattedPrice&quot;</span><span class="p">:</span><span class="s2">&quot;$124.99&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;priceType&quot;</span><span class="p">:</span><span class="s2">&quot;CURRENT_PRICE&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;warranties&quot;</span><span class="p">:[</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;flashDeal&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">30905</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;href&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api2/flashdeals/30905&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;currentTime&quot;</span><span class="p">:</span><span class="s2">&quot;2015-10-14T23:43:20.413-06:00&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;startDateTime&quot;</span><span class="p">:</span><span class="s2">&quot;2015-10-14T10:00:00.000-06:00&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;endDateTime&quot;</span><span class="p">:</span><span class="s2">&quot;2015-10-15T10:00:00.000-06:00&quot;</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;shipDeliveryEstimates&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;optionId&quot;</span><span class="p">:</span><span class="mi">15463578</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;productType&quot;</span><span class="p">:</span><span class="s2">&quot;REGULAR&quot;</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;taxonomy&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;store&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">43</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Bedding &amp; Bath&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;apiUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api/search.json?taxonomy=sto43&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;htmlUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/Bedding-Bath/43/store.html&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;department&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">454</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Fashion Bedding&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;apiUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api/search.json?taxonomy=dep454&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;htmlUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/Bedding-Bath/Fashion-Bedding/454/dept.html&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;category&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">4540</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Duvet Covers&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;apiUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api/search.json?taxonomy=cat4540&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;htmlUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/Bedding-Bath/Duvet-Covers/4540/cat.html&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;subCategory&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">1399</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Duvet Covers&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;apiUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/api/search.json?taxonomy=sto1399&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;htmlUrl&quot;</span><span class="p">:</span><span class="s2">&quot;http://www.overstock.com/Bedding-Bath/Duvet-Covers/4540/cat.html&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;originalOptionCount&quot;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renumber Filenames Sequentially]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/06/17/renumber-gem/"/>
    <updated>2015-06-17T20:07:04-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/06/17/renumber-gem</id>
    <content type="html"><![CDATA[<p><code>renumber</code> is a small command line utility that renames files in a single directory. Files are sorted in
lexicographic order and then renamed with sequential numbers. It is possible to specify a prefix and suffix - these are
optional parameters. There are a couple of examples of usage below.</p>

<p>The code is open source and available on <a href="https://github.com/nick-aschenbach/renumber">GitHub</a>.</p>

<p><strong>Command Line Usage</strong></p>

<pre><code>$ renumber &lt;directory&gt; &lt;prefix&gt; &lt;suffix&gt;
</code></pre>

<!-- more -->


<p><strong>Installation</strong></p>

<p>The tool requires that Ruby is installed. If so, install <code>renumber</code> with the following command:</p>

<pre><code>$ gem install renumber
</code></pre>

<p><strong>Use case</strong></p>

<p>I developed <code>renumber</code> so that I could renumber thousands images from a digital camera for use in a time lapse movie.
The tool I used to stitch these images together into a movie (called <a href="https://www.ffmpeg.org/">ffmpeg</a>) died if the file
names had a gap (e.g. &hellip;, IMG2047, IMG2049, IMG2050, &hellip;).</p>

<p>The <code>renumber</code> tool solved this problem by renumbering the files to not have gaps.</p>

<p><strong>Simple Usage</strong></p>

<p>Let&rsquo;s take a directory with several non-sequential files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwxr-xr-x  15 troy  staff  510 Jun 17 20:12 .
</span><span class='line'>drwx------+  7 troy  staff  238 Jun 17 20:06 ..
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 03.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 04.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 07.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 09.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 10.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 11.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 13.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 15.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 17.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 19.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 20.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 22.txt
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 99.txt</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s change to that directory and run the following:</p>

<pre><code>$ renumber .
</code></pre>

<p>Here&rsquo;s the directory listing after running the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwxr-xr-x  15 troy  staff  510 Jun 17 20:14 .
</span><span class='line'>drwx------+  7 troy  staff  238 Jun 17 20:06 ..
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 00
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 01
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 02
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 03
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 04
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 05
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 06
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 07
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 08
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 09
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 10
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 11
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:12 12</span></code></pre></td></tr></table></div></figure>


<p><strong>Prefix and Suffix</strong></p>

<p>Let&rsquo;s take the same initial file list as the above example. Let&rsquo;s add a prefix and suffix:</p>

<pre><code>$ renumber . foo .text
</code></pre>

<p>Here&rsquo;s the directory listing after running the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwxr-xr-x  15 troy  staff  510 Jun 17 20:17 .
</span><span class='line'>drwx------+  7 troy  staff  238 Jun 17 20:06 ..
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo00.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo01.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo02.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo03.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo04.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo05.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo06.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo07.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo08.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo09.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo10.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo11.text
</span><span class='line'>-rw-r--r--   1 troy  staff    3 Jun 17 20:16 foo12.text</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arkanoid Game Levels]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/04/27/arkanoid-game-levels/"/>
    <updated>2015-04-27T19:12:09-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/04/27/arkanoid-game-levels</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://nick-aschenbach.github.io/assets/2015-04-27-arkanoid-game-levels/images/arkanoid_arcadeflyer.png" title="auto auto" > I loved playing
Arkanoid when I was a kid. I spent hours playing the game over at my friend&rsquo;s house when I was growing up on
the original Nintendo Entertainment System. It was rated as one of the top games after its release in 1986.</p>

<p>I found a great Arkanoid background map set on <a href="http://www.nesmaps.com/">NES maps</a> by Rick Bruns (see below). Each
level was perfectly aligned at 192 pixels wide by 232 pixels tall. The top, left and right edges were 8 pixels. Each
brick was 16 pixels wide by 8 pixels tall. With a little math (and confirming in Photoshop), I found that the
background could support exactly 11 brick tiles wide by 28 tall.</p>

<p>This made the map set the perfect asset for image parsing. My plan was to take the image as input and generate
source code with level data as output. Finally, I used a 3D graphics library to render the levels in browser.</p>

<p><strong>Image Parsing</strong></p>

<p>I wanted to use the <a href="https://github.com/wvanbergen/chunky_png">Chunky PNG</a> and
<a href="https://github.com/wvanbergen/oily_png">Oily PNG</a> gems for image parsing. The former is a 100% Ruby implementation
for encoding and decoding PNG images with read / write access at the pixel level. The latter gem uses native C
extensions to improve encoding and decoding speed for Chunky. I used these gems on other projects with good success.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-27-arkanoid-game-levels/images/arkanoid.png" title="auto auto" ></p>

<!-- more -->


<p>The brick colors were consistent among all of the levels. Rick created a legend with all of the colors on one page for
convenience. I created a hash in Ruby to associate R, G, B values with a color index using Photoshop and my IDE:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">COLOR_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;252,252,252&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1"># white</span>
</span><span class='line'>  <span class="s2">&quot;252,116,96&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="c1"># orange</span>
</span><span class='line'>  <span class="s2">&quot;60,188,252&quot;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="c1"># light blue</span>
</span><span class='line'>  <span class="s2">&quot;128,208,16&quot;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="c1"># green</span>
</span><span class='line'>  <span class="s2">&quot;216,40,0&quot;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="c1"># red</span>
</span><span class='line'>  <span class="s2">&quot;0,112,236&quot;</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="c1"># blue</span>
</span><span class='line'>  <span class="s2">&quot;252,116,180&quot;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="c1"># pink</span>
</span><span class='line'>  <span class="s2">&quot;252,152,56&quot;</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span> <span class="c1"># yellow</span>
</span><span class='line'>  <span class="s2">&quot;188,188,188&quot;</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="c1"># silver</span>
</span><span class='line'>  <span class="s2">&quot;240,188,60&quot;</span> <span class="o">=&gt;</span> <span class="mi">10</span> <span class="c1"># gold</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I mentioned earlier that bricks were 16 pixels x 8 pixels, however some tiles had a drop shadow of one or two pixels.
I decided to scan images for blocks of color that matched one of the keys in the hash above. I made this decision
because I needed to be able to differentiate between the background (which often had long runs of pixels) and bricks.</p>

<p>I stored the color of the pixel in the upper left corner of a block and checked each color against this. If a
sufficiently large block of color was found, I determined that it was a brick and returned <code>nil</code> otherwise:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">get_brick_color</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r_initial</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">g_initial</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">g</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">b_initial</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">b</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">14</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x_offset</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y_offset</span><span class="o">|</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y_offset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">g</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">g</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y_offset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">b</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y_offset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">r</span> <span class="o">!=</span> <span class="n">r_initial</span> <span class="o">||</span> <span class="n">g</span> <span class="o">!=</span> <span class="n">g_initial</span> <span class="o">||</span> <span class="n">b</span> <span class="o">!=</span> <span class="n">b_initial</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">r_initial</span><span class="p">,</span> <span class="n">g_initial</span><span class="p">,</span> <span class="n">b_initial</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My plan was to scan the 11 tile x 28 tile grid for bricks using the <code>get_brick_color</code> method. Finally,
I wrote a little code to generate Javascript code by printing to standard output. I decided to output two digit numbers
so that the grid index colors would line up because the color indexes went up to 10.</p>

<p>Here is the full source for the image parsing code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;oily_png&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;awesome_print&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">COLOR_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;252,252,252&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1"># white</span>
</span><span class='line'>  <span class="s2">&quot;252,116,96&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="c1"># orange</span>
</span><span class='line'>  <span class="s2">&quot;60,188,252&quot;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="c1"># light blue</span>
</span><span class='line'>  <span class="s2">&quot;128,208,16&quot;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="c1"># green</span>
</span><span class='line'>  <span class="s2">&quot;216,40,0&quot;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="c1"># red</span>
</span><span class='line'>  <span class="s2">&quot;0,112,236&quot;</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="c1"># blue</span>
</span><span class='line'>  <span class="s2">&quot;252,116,180&quot;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="c1"># pink</span>
</span><span class='line'>  <span class="s2">&quot;252,152,56&quot;</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span> <span class="c1"># yellow</span>
</span><span class='line'>  <span class="s2">&quot;188,188,188&quot;</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="c1"># silver</span>
</span><span class='line'>  <span class="s2">&quot;240,188,60&quot;</span> <span class="o">=&gt;</span> <span class="mi">10</span> <span class="c1"># gold</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Notes:</span>
</span><span class='line'><span class="c1"># 8 pixel border left, top and right</span>
</span><span class='line'><span class="c1"># brick size: 16 wide x 8 tall (including 1 px shadow)</span>
</span><span class='line'><span class="c1"># Each sub image size is 192, 232</span>
</span><span class='line'><span class="k">def</span> <span class="nf">scan_grid_location</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">sheet_grid_x</span><span class="p">,</span> <span class="n">sheet_grid_y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">startx</span> <span class="o">=</span> <span class="n">sheet_grid_x</span> <span class="o">*</span> <span class="mi">192</span>
</span><span class='line'>  <span class="n">starty</span> <span class="o">=</span> <span class="n">sheet_grid_y</span> <span class="o">*</span> <span class="mi">232</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="n">initialize_array</span>
</span><span class='line'>  <span class="c1"># 11 columns wide x 28 rows tall</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">11</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">brick_x</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">28</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">brick_y</span><span class="o">|</span>
</span><span class='line'>      <span class="n">color</span> <span class="o">=</span> <span class="n">get_brick_color</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">startx</span> <span class="o">+</span> <span class="n">brick_x</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="mi">8</span><span class="p">,</span> <span class="n">starty</span> <span class="o">+</span> <span class="n">brick_y</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>      <span class="k">next</span> <span class="k">if</span> <span class="n">color</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">color</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">color</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">color</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">color</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">color_index</span> <span class="o">=</span> <span class="no">COLOR_MAP</span><span class="o">[</span><span class="n">color</span><span class="o">]</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">StandardError</span> <span class="k">if</span> <span class="n">color_index</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">array</span><span class="o">[</span><span class="n">brick_x</span><span class="o">][</span><span class="n">brick_y</span><span class="o">]</span> <span class="o">=</span> <span class="n">color_index</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Zero out the brick array</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize_array</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">11</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">inner_array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="mi">28</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">inner_array</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">inner_array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Scan to ensure block is a brick</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_brick_color</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r_initial</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">g_initial</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">g</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">b_initial</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">b</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">14</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x_offset</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y_offset</span><span class="o">|</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y_offset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">g</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">g</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y_offset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Color</span><span class="o">.</span><span class="n">b</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y_offset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">r</span> <span class="o">!=</span> <span class="n">r_initial</span> <span class="o">||</span> <span class="n">g</span> <span class="o">!=</span> <span class="n">g_initial</span> <span class="o">||</span> <span class="n">b</span> <span class="o">!=</span> <span class="n">b_initial</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">r_initial</span><span class="p">,</span> <span class="n">g_initial</span><span class="p">,</span> <span class="n">b_initial</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arkanoid</span> <span class="o">=</span> <span class="no">ChunkyPNG</span><span class="o">::</span><span class="no">Image</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="s1">&#39;arkanoid.png&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Emit javascript code</span>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;[&#39;</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="n">level</span> <span class="o">=</span> <span class="n">scan_grid_location</span><span class="p">(</span><span class="n">arkanoid</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;[&#39;</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">28</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">brick_y</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s1">&#39;[&#39;</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">11</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">brick_x</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">level</span><span class="o">[</span><span class="n">brick_x</span><span class="o">][</span><span class="n">brick_y</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;],&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;],&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;];&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is sample output from the second map file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">02</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">02</span><span class="p">,</span> <span class="mi">03</span><span class="p">,</span> <span class="mi">04</span><span class="p">,</span> <span class="mi">06</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">09</span><span class="p">,</span> <span class="mi">02</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">],</span>
</span><span class='line'><span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Visualization </strong></p>

<p>I use the <a href="http://threejs.org/">Three.js</a> Javascript library for in browser 3D graphics projects. It abstracts
some of the low level details of WebGL and provides some nice primitives.</p>

<p>I started with some boilerplate code which I modified from Three.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Define scene, camera and renderer</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">/</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="p">({</span><span class="nx">antialias</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">renderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Render frames in a tight loop</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">render</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I defined some of the basics: a <code>scene</code>, <code>camera</code> and a <code>renderer</code>. The <code>render</code> function creates a loop that
triggers the scene to be redrawn at 60 frames per second.</p>

<p>I divided the drawing elements into three parts: drawing the level, drawing a wireframe box to enclose the level and
lights that provide some nice effects.</p>

<p>Here is the source code that describes drawing the level:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Draw bricks (defined in levels.js)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">draw_level</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scene</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">28</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">11</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">color_index</span> <span class="o">=</span> <span class="nx">level_data</span><span class="p">[</span><span class="nx">level</span><span class="p">][</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">color_index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">shininess</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">color_index</span> <span class="o">&gt;=</span> <span class="mi">9</span><span class="p">)</span> <span class="nx">shininess</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// Gold and silver</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">color</span><span class="o">:</span> <span class="nx">color_data</span><span class="p">[</span><span class="nx">color_index</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">specular</span><span class="o">:</span> <span class="mh">0x232322</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">shininess</span><span class="o">:</span> <span class="mi">50</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxGeometry</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">mesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">mesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">j</span> <span class="o">*</span> <span class="mf">2.2</span> <span class="o">-</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">mesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">i</span> <span class="o">*</span> <span class="o">-</span><span class="mf">1.2</span> <span class="o">+</span> <span class="mi">18</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">mesh</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">object_list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">mesh</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I defined a <code>level_data</code> array (see <code>level.js</code> below). This code was the output from the Ruby image parser described
earlier in the post. We look up the <code>color_index</code> based on where are are in the loop. If the index is zero, then we skip
that element. Otherwise, we create a new box that is twice is wide as it is tall (proportional to the 16 pixel x 8
pixel blocks from the original image).</p>

<p>We assign a material using Phong shading and the color defined in a <code>color_data</code> array:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">color_data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="mh">0x000000</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xfcfcfc</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xfc7460</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x3cbcfc</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x80d010</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xd82800</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x0070ec</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xfc74b4</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xfc9838</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xbcbcbc</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xf0bc3c</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>The index of the array corresponds to the value in the <code>level_data</code> array. We use black <code>0x000000</code> as a placeholder
color. Finally we define a mesh with the <code>geometry</code> and <code>material</code> variables. The brick position is defined by
its (i, j) position.</p>

<p>Here is the demo for the code (<a href="http://nick-aschenbach.github.io/assets/2015-04-27-arkanoid-game-levels/demo/index.html">fullscreen</a>):</p>

<iframe src="http://nick-aschenbach.github.io/assets/2015-04-27-arkanoid-game-levels/demo/index.html" width="700" height="600"></iframe>


<p>These are the relevant full source files:</p>

<ul>
<li><a href="http://nick-aschenbach.github.io/assets/2015-04-27-arkanoid-game-levels/demo/js/3d.js">3d.js</a> - Event handling and rendering code</li>
<li><a href="http://nick-aschenbach.github.io/assets/2015-04-27-arkanoid-game-levels/demo/js/levels.js">levels.js</a> - Level and color data</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Custom Machined Raised Bed]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/04/13/building-a-custom-machined-raised-bed/"/>
    <updated>2015-04-13T20:42:10-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/04/13/building-a-custom-machined-raised-bed</id>
    <content type="html"><![CDATA[<p>Looking forward to sunshine and warmer temperatures, I decided to take on a project over the weekend to build
a small raised bed so we could try planting some peppers and herbs this spring. My wife asked that the bed be
around 18&#8221; tall. I went to work in my project notebook and came up with the following hand sketch:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/hand-sketch.jpg" title="auto auto" ></p>

<p>I wanted to use 4&#8221; x 4&#8221; posts for the corners and 2&#8221; x 6&#8221; boards for the walls of the planter box. There were a
couple of design elements that I wanted to incorporate. First, I wanted the 2&#8221; x 6&#8221; boards to be recessed into
the post. Also, I wanted to put a 45 degree chamfer on the top of each 4&#8221; x 4&#8221; for decoration. I decided
that the overall dimensions should be around 36&#8221; x 60&#8221; so I could maximize utilization of the 8 foot lengths
of the 2&#8221; x 6&#8221; stock board size.</p>

<p><strong>Materials</strong></p>

<!-- more -->


<p>I went to Home Depot to source the lumber. I found all of the boards to be quite wet as if they had just been brought
in from outside and tried to find boards that were relatively straight. Turning the boards vertically and looking down
the edge makes it easy to identify which ones were straighter.</p>

<p>The boards were cut to the following dimensions and quantities:</p>

<pre><code>1 @ 4" x 4" x 96" (around $9 / each) cut to 4 pieces @ 18" long
6 @ 2" x 6" x 96" (around $8 / each) split into 6 pieces @ 36" long and 6 pieces @ 60" long
</code></pre>

<p>I asked that the sawyer cut the pieces the same size. I did not care that the pieces were exactly 36&#8221; or 60&#8221;, but
it was important to me that they were all the same. The parts came out with about 0.125&#8221; of variation. A more
experienced sawyer using a stop on the saw, should be able to cut the parts to close tolerances.</p>

<p><img class="left" src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/soil.jpg" width="300" title="auto" ></p>

<p>I also purchased potting soil, which is sold in 3 cubic foot bags at Home Depot. The soil should be
be a few inches below the 18&#8221; post. Here is how I calculated the amount of soil I needed for the project:</p>

<pre><code>16" x 36" x 60" = 34,560 in^3 / (1,728 in^3 / 1 foot^3)
= 20 feet^3
</code></pre>

<p>The calculation suggested that about six or seven bags were needed. I decided to go for three bags of garden soil
($8.50 / each) and three bags of raised bed and potting mix ($10 / each). The garden soil would comprise the lower
layer and the raised bed mix would be on the top.</p>

<p>With the boards and soil in hand, I headed home for the next part of the project.</p>

<p><strong>Fabrication</strong></p>

<p>The key to putting a slot the 4&#8221; x 4&#8221; post would be to create a small fixture that would hold the part in place
during the machining process. My CNC router imparts several pounds of force into the work and it is important
that the work is held securely in place to ensure a good quality part. The 4&#8221; x 4&#8221; posts were about 3.625&#8221; square.
I came up with the following shop drawing:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/drawing.png" title="auto auto" ></p>

<p>I used a 23.5&#8221; x 11.25&#8221; scrap of plywood for the base of the fixture. I held this down using
my table&rsquo;s vacuum fixture and cut a trace of approximate size of the 4&#8221; x 4&#8221; x 18&#8221; board about 0.02&#8221; deep. The
critical dimension here is the 3.625&#8221; width. I fastened a 2&#8221; x 2&#8221; block right along the long edge of the trace and then
put an angle bracket along the end.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/fixture.jpg" title="auto auto" ></p>

<p>Finally I wrapped a 4&#8221; x 4&#8221; x 18&#8221; cut piece in paper and put it up against the two edges. The paper allows for about
0.01&#8221; extra spacing. Then I installed two final angle brackets ensuring a snug fit. It is important to be able
to move all of the 4&#8221; x 4&#8221;s in and out of the fixture. I tested each 4&#8221; x 4&#8221; and rotated each 90 degrees in the
tool.</p>

<p>I put two screws though the angle brackets into the work to hold it in place while the router was running. The
run time was about 10 minutes per pocket. This video shows the pocket being machining:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/b4Hyl-paMj4" allowfullscreen></iframe></div>


<p>The next operation was to put a 0.25&#8221; x 45 degree chamfer on the top of each post. This operation was performed on
the manual router table:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/chamfer.jpg" title="auto auto" ></p>

<p>Finally, I needed to added some pilot holes and countersunk holes to make assembly easier. First I made marks at
5.5&#8221; and 11&#8221; inches. These are the approximate locations of the boards from the edge of the pocket (close to
the top of the post). Then I added marks roughly 2&#8221; on center. For one pocket I drilled through holes at 1&#8221; and 3&#8221;
from the top of each board. Then for the other pocket I drilled holes at 2&#8221; and 4&#8221; from the top of each board. This
ensured that the screws would not intersect in the middle of the post:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/holes.jpg" title="auto auto" ></p>

<p>The last operation was to reverse drill the pilot holes with a countersink bit on the drill press. I recessed the
countersink roughly 0.5&#8221; into the board to hide the 4&#8221; galvanized screws that I purchased. The
one pound box ($7.50) contained 50 screws and I needed 48 to do the job (12 boards x 4 fasteners per board):</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/countersink.jpg" title="auto auto" ></p>

<p><strong>Assembly</strong></p>

<p>With the fabrication complete, I took all of the parts outside on the sidewalk. Assembly was a snap. I started by
turning the 4&#8221; x 4&#8221; posts upside down so the chamfered top was on the sidewalk. I put each 2&#8221; x 6&#8221; post into the slot,
tapped the 4&#8221; x 4&#8221; posts towards each other and then put in the 4&#8221; long screws. I fastened each board one at a
time, working my way up:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/assembly.jpg" title="auto auto" ></p>

<p>After about 20 minutes with the drill, the raised bed frame was complete. I flipped the assembly over and positioned
it next to the sidewalk. We put cardboard in the bottom of the box after reading good things about it. Finally, the
six bags of soil went into the box. After each bag we used the rake and a shovel to even things out.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-04-13-building-a-custom-machined-raised-bed/installed.jpg" title="auto auto" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engine API Endpoint Authentication Using Rack Middleware]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/04/07/rails-engine-api-endpoint-authentication/"/>
    <updated>2015-04-07T22:28:10-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/04/07/rails-engine-api-endpoint-authentication</id>
    <content type="html"><![CDATA[<p>At work, we recently discussed how best to authenticate an API endpoint that we needed from a rails engine. In the host
application, we require that clients use tokens for API authentication. In a parent class before filter, we call a
remote web service to validate these tokens. We all agreed that it was a bad idea to copy this code over from the host
into the engine.</p>

<p>There were a couple of reasons for this. Not only would the code be duplicated, but we felt like it would be a better
separation of concerns to keep authentication out of the engine. Another argument is that we would not want
to impose an authentication system from the gem on the host application. Ryan Bigg expands on this in a
<a href="http://ryanbigg.com/2012/03/engines-and-authentication/">blog post</a> on Forem.</p>

<!-- more -->


<p>We investigated a handful of approaches. The simplest, least invasive approach seemed to be to use Rack middleware.
First, we register the middleware with an array of endpoints to validate:</p>

<figure class='code'><figcaption><span>application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Middleware</span><span class="o">::</span><span class="no">TokenAuthorizer</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;api/accounts/&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we define the middleware:</p>

<figure class='code'><figcaption><span>token_authorizer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Middleware</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">TokenAuthorizer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">validation_endpoints</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>      <span class="vi">@validation_endpoints</span> <span class="o">=</span> <span class="n">validation_endpoints</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">unauthorized</span> <span class="k">if</span> <span class="n">need_to_validate?</span><span class="p">(</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">invalid_token?</span><span class="p">(</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;HTTP_AUTHORIZATION&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">need_to_validate?</span><span class="p">(</span><span class="n">request_path</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@validation_endpoints</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">validation_endpoint</span><span class="o">|</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">request_path</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">validation_endpoint</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">invalid_token?</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">token</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="o">!</span><span class="no">WebServices</span><span class="o">::</span><span class="no">TokenAuth</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">is_valid_token?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">unauthorized</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">401</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s1">&#39;Unauthorized&#39;</span><span class="o">]]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In most cases, we will just end up executing calling the host application (via <code>@app.call(env)</code>). However if the
<code>PATH_INFO</code> matches an initialized endpoint and we pass in an invalid token, then we will return a <code>401</code> HTTP status
code.</p>

<p>There are a few drawbacks to this approach:</p>

<ul>
<li>We do not take into the HTTP verb into account and may match more endpoints than we intend (e.g. api/accounts/:account_identifier)</li>
<li>The middleware runs for all requests, even ones where we have a separate authentication mechanism</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jRuby Test Drive]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/03/14/getting-started-with-jruby/"/>
    <updated>2015-03-14T09:09:13-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/03/14/getting-started-with-jruby</id>
    <content type="html"><![CDATA[<p>After hearing about jRuby on several Ruby Rogues podcasts and reading posts about it online, I wanted to give it a shot.</p>

<p>Installation is super easy if you use <a href="https://rvm.io/">rvm</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">rvm</span> <span class="nx">install</span> <span class="nx">jruby</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will install several dependencies (like the patch, gawk, g++ and the JDK if you do not already have them
installed). The installation and setup took about seven minutes on a clean Ubuntu 12.04 Vagrant box I spun up for
testing purposes.</p>

<p>Let&rsquo;s say hello in irb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span> <span class="s1">&#39;Hello World!&#39;</span>
</span><span class='line'><span class="no">Hello</span> <span class="no">World</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Specifying the package is a little cumbersome. Importing the <code>java.lang.System</code> makes things a little easier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">System</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span> <span class="s1">&#39;Hello World!&#39;</span>
</span><span class='line'><span class="no">Hello</span> <span class="no">World</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>jRuby provides access to Java&rsquo;s rich API and large number of open source packages. The runtime performance is
approximately the same, however the memory consumption appears to be higher for jRuby programs according to a
<a href="http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=jruby&amp;lang2=yarv&amp;data=u64q">2014 survey</a>.
It should be noted that the JVM startup time is excluded in these benchmarks so as not to bias the results. However,
it is not inconsequential. I understand that JVM start time for some test suites can take several seconds for larger
projects, which can be painful when running regression tests.</p>

<p>One of the main drawbacks to concurrent programming in MRI Ruby is that threads cannot run in parallel. These are
are useful when blocking on input and output, for example. However, gems that use native C code can provide
multi-threading facilities (e.g. by using POSIX threads). Another issue with MRI Ruby is that a number of data
structures are not thread safe (with the exception of the <code>Queue</code> class).</p>

<p>jRuby provides access to <code>java.lang.Thread</code> which enables running multiple threads of execution concurrently
on multiple cores. There appear to be some notable drawbacks in jRuby. Because the code runs on the JVM, we are
precluded from using gems with native code. These gems need to be swapped out with
<a href="https://github.com/jruby/jruby/wiki/C-Extension-Alternatives">alternatives</a>. Another issue is that jRuby is several
versions behind MRI Ruby. The latest jRuby release at the time this was written is <code>1.7.19</code>, which was to shore up
compatibility with MRI Ruby version <code>1.9.3</code>.</p>

<p>Threads are much cheaper to spin up than processes. Access to native threads in jRuby may help developers to scale
applications by better utilizing the hardware. Use of multiple threads of execution is a natural fit for web servers,
which need to handle multiple client connections concurrently.</p>

<p><strong>Test Drive</strong></p>

<p>Let&rsquo;s take jRuby out for a spin with a hello world example that utilizes <code>JFrame</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JButton</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloFrame</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setup_interface</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup_interface</span>
</span><span class='line'>    <span class="n">button</span> <span class="o">=</span> <span class="no">JButton</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">button</span><span class="o">.</span><span class="n">addActionListener</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Hello World&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="no">JFrame</span><span class="o">::</span><span class="no">EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setSize</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setLocationRelativeTo</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">HelloFrame</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you save this as a file called <code>hello.rb</code> then it can be run from the command line by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby hello.rb
</span></code></pre></td></tr></table></div></figure>


<p>Here is the app in action:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-03-14-getting-started-with-jruby/images/hello.png" width="300" height="200"></p>

<p>The action listener <code>do ... end</code> Ruby syntax is quite a bit cleaner than the Java alternative using an anonymous inner
class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ActionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Taking what I learned and hungry for more, I decided to write a minimal web browser using jRuby. The interface is
comprised of a <code>JTextField</code> to input the URI and a <code>JEditorPane</code> to render the HTML. In addition, I use <code>BorderLayout</code>
as the layout manager for the <code>JFrame</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JScrollPane</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JTextField</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JEditorPane</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">BorderLayout</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Browser</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="s1">&#39;jRuby Browser&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">initialize_interface</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize_interface</span>
</span><span class='line'>    <span class="n">response_body</span> <span class="o">=</span> <span class="no">JEditorPane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;text/html&#39;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uri_input</span> <span class="o">=</span> <span class="no">JTextField</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uri_input</span><span class="o">.</span><span class="n">add_action_listener</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="n">response_body</span><span class="o">.</span><span class="n">setPage</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">getActionCommand</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="no">BorderLayout</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">uri_input</span><span class="p">,</span> <span class="no">BorderLayout</span><span class="o">::</span><span class="no">NORTH</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="no">JScrollPane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">response_body</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setSize</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">600</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setLocationRelativeTo</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="no">JFrame</span><span class="o">::</span><span class="no">EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Browser</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>While <code>JEditorPane</code> HTML support is very limited, we are able to display the webpage data for <code>example.com</code>. I resized
the window here to show the scrollbars:</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-03-14-getting-started-with-jruby/images/browser.png" width="800" height="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Isometric Tiling]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/02/25/isometric-tile-engine/"/>
    <updated>2015-02-25T22:40:30-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/02/25/isometric-tile-engine</id>
    <content type="html"><![CDATA[<p>In this post I share a few simple javascript examples of isometric tiling commonly used to create the illusion
of 3D graphics in games.</p>

<p>For years, side-scrolling video games use a projection where the camera is aligned along one of the axes. Many original
game titles like Tetris, Zelda, Super Mario Bros place the camera either above the player looking down along a
vertical axis or looking directly from the side. Basic techniques like shading and parallax scrolling (where foreground
images scroll faster than background images) help to provide a sense of depth.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/images/mario.gif" title="auto 300" ></p>

<p>An <a href="http://en.wikipedia.org/wiki/Isometric_projection">isometric projection</a> is a popular way of visualizing 3D objects
on a 2D screen. This involves rotating the camera 45 degrees to one side and then angling down roughly 30 degrees. This
approach is used in several role playing and strategy games (Sim City 2000 pictured below). Q*bert, released in 1982,
was perhaps one of the first games that used isometric graphics.</p>

<p><img src="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/images/simcity.png" title="auto 300" ></p>

<!-- more -->


<p><strong>Drawing the Grid</strong></p>

<p>A common pattern is to use tiles that are two times wider than they are tall. Also, I find that lines with a slope of 2:1
(two pixels horizontally : one vertical) look better as pixel art. This ratio makes it relatively easy to calculate
the screen position of a tile and to find the position of the mouse over a tile.</p>

<p>Here is a simple example with 128x64 tiles on a HTML5 canvas:</p>

<iframe src="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/isometric01/index.html" width="100%" height="375"></iframe>


<p>This snippet describes how to position the diamond / rhombus shapes in a grid
(<a href="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/isometric01/js/isometric.js">full source</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">tileColumnOffset</span><span class="o">:</span> <span class="mi">64</span><span class="p">,</span>
</span><span class='line'><span class="nx">tileRowOffset</span><span class="o">:</span> <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="nx">redrawTiles</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Xi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">Xi</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">Xtiles</span><span class="p">;</span> <span class="nx">Xi</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Yi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">Yi</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">Ytiles</span><span class="p">;</span> <span class="nx">Yi</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">offX</span> <span class="o">=</span> <span class="nx">Xi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="nx">Yi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">originX</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">offY</span> <span class="o">=</span> <span class="nx">Yi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="nx">Xi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">originY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Draw tile outline</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;#999&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">,</span> <span class="nx">offX</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we use actual graphical tiles <code>redrawTiles</code>, the draw order will need to be changed so that tiles in the back
are rendered before ones in the front. Let&rsquo;s extend the work by adding colors, coordinates and some mouse listeners:</p>

<iframe src="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/isometric02/index.html" width="100%" height="375"></iframe>


<p>Here is the salient code that handles canvas drawing
(<a href="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/isometric02/js/isometric.js">full source</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">redrawTiles</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Xi</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">Xtiles</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="nx">Xi</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">Xi</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Yi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">Yi</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">Ytiles</span><span class="p">;</span> <span class="nx">Yi</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">drawTile</span><span class="p">(</span><span class="nx">Xi</span><span class="p">,</span> <span class="nx">Yi</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="nx">drawTile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Xi</span><span class="p">,</span> <span class="nx">Yi</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">offX</span> <span class="o">=</span> <span class="nx">Xi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="nx">Yi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">originX</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">offY</span> <span class="o">=</span> <span class="nx">Yi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="nx">Xi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">originY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Draw tile interior</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="nx">Xi</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">selectedTileX</span> <span class="o">&amp;&amp;</span> <span class="nx">Yi</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">selectedTileY</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;yellow&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;green&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">offX</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">,</span> <span class="nx">offX</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Draw tile outline</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;#999&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">drawLine</span><span class="p">(</span><span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">,</span> <span class="nx">offX</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">showCoordinates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;orange&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">Xi</span> <span class="o">+</span> <span class="s2">&quot;, &quot;</span> <span class="o">+</span> <span class="nx">Yi</span><span class="p">,</span> <span class="nx">offX</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileColumnOffset</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">9</span><span class="p">,</span> <span class="nx">offY</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Determining the location of the mouse over a canvas tile (tileX, tileY) is determined by a few calculations in a
mouse move listener:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">originX</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tileRowOffset</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">originY</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">tileX</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">/</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">-</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">/</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">tileY</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">/</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tileColumnOffset</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">/</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tileRowOffset</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Graphical Tiles</strong></p>

<p><a href="http://opengameart.org/content/isometric-tiles">Open Game Art</a> has over a hundred free tile sets worth investigating.
However, <a href="http://www.kenney.nl/assets">Kenny.nl</a> provides a handful of professional looking isometric tile sets. The
quality is just excellent. He provides both individual isometric tiles and sprite sheets. XML metadata is also provided
that indicates tile location and size in the sprite sheets.</p>

<iframe src="http://nick-aschenbach.github.io/assets/2015-02-25-isometric-tile-engine/isometric03/index.html" width="100%" height="400px"></iframe>


<p>The code is very similar between the last two examples. A few small tweaks are needed to ensure that
tile height is consistent. Also, using tile sprite sheets would result in a performance enhancement due to the
fact that each image is loaded individually with the current implementation. However, the goal here was to keep things
as simple as possible.</p>

<p>The main Javascript files are:</p>

<ul>
<li><code>isometric.js</code> which initializes the map and handles rendering and event handling</li>
<li><code>map.js</code> which stores a 2D array of map data and an array of image locations.</li>
</ul>


<p>The source code and images for this are available on
<a href="https://github.com/nick-aschenbach/simple-isometric-tile-engine">Github</a>.</p>

<p><strong>Additional Resources</strong></p>

<ul>
<li><a href="http://stackoverflow.com/questions/892811/drawing-isometric-game-worlds">Drawing Isometric Game Worlds</a> has some
pointers on the math and layout.</li>
<li><a href="http://gamedevelopment.tutsplus.com/tutorials/creating-isometric-worlds-a-primer-for-game-developers--gamedev-6511">Isometric Primer for Game Developers</a>
provides a good foundation and covers bounds detection, depth sorting and animation</li>
<li><a href="https://github.com/overviewer/Minecraft-Overviewer">Overviewer</a>, a tool for mapping Minecraft worlds using Google
Maps has excellent <a href="http://docs.overviewer.org/en/latest/design/designdoc/">design documentation</a> that covers its
sprite rendering engine.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a Small DSL Using Rack]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/02/21/a-small-dsl-rack-app/"/>
    <updated>2015-02-21T22:03:36-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/02/21/a-small-dsl-rack-app</id>
    <content type="html"><![CDATA[<p>In this post, I write a small domain specific language to handle HTTP requests (inspired by
<a href="http://www.sinatrarb.com/">Sinatra</a>) using Rack. We start by taking a quick look at a few small rack applications
and then write a small DSL.</p>

<p><strong> Rack </strong></p>

<p>Rack provides an abstraction layer between multiple web servers (unicorn, webrick, thin, etc) and your ruby application.
This allows developers to focus on the application layer instead of working on handling the low level details associated
with dealing with a HTTP request.</p>

<p>Let&rsquo;s take a look at the &ldquo;hello world&rdquo; example provided by <a href="http://rack.github.io/">Rack</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="o">[</span><span class="s1">&#39;200&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s1">&#39;A barebones rack app.&#39;</span><span class="o">]]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="o">.</span><span class="n">run</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use rack, one must provide an object (class, proc or lambda) that responds to <code>call</code> and returns an array with
elements. The first element is a stringified HTTP status code. The second is a hash of response headers. The last
element is the response body, which must respond to the <code>each</code> method.</p>

<p>Let&rsquo;s run the rack app in one terminal and issue a HTTP request against it in a different one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -v localhost:8080
</span><span class='line'>&gt; GET / HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.30.0
</span><span class='line'>&gt; Host: localhost:8080
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Content-Type: application/json
</span><span class='line'>&lt; Server: WEBrick/1.3.1 <span class="o">(</span>Ruby/2.1.1/2014-02-24<span class="o">)</span>
</span><span class='line'>&lt; Date: Fri, 20 Feb 2015 06:19:57 GMT
</span><span class='line'>&lt; Content-Length: 18
</span><span class='line'>&lt; Connection: Keep-Alive
</span><span class='line'>&lt;
</span><span class='line'>Barebones rack app
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Let&rsquo;s supply a class that implements a <code>call</code> class method. Let&rsquo;s also use <code>awesome_print</code> to interrogate the <code>env</code>
parameter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;awesome_print&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RackApp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ap</span> <span class="n">env</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;200&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s1">&#39;Hello World&#39;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="o">.</span><span class="n">run</span> <span class="no">RackApp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s issue a HTTP request against this app using the bash command <code>curl -v localhost:8080/foobar?baz=true</code> and observe
the app output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;GATEWAY_INTERFACE&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;CGI/1.1&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;PATH_INFO&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;/foobar&quot;</span>,
</span><span class='line'>         <span class="s2">&quot;QUERY_STRING&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;baz=true&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;REMOTE_ADDR&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;::1&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;REMOTE_HOST&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;localhost&quot;</span>,
</span><span class='line'>       <span class="s2">&quot;REQUEST_METHOD&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;GET&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;REQUEST_URI&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;http://localhost:8080/foobar?baz=true&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;SCRIPT_NAME&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;SERVER_NAME&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;localhost&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;SERVER_PORT&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;8080&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;SERVER_PROTOCOL&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;HTTP/1.1&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;SERVER_SOFTWARE&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;WEBrick/1.3.1 (Ruby/2.1.1/2014-02-24)&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;HTTP_USER_AGENT&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;curl/7.30.0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;HTTP_HOST&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;localhost:8080&quot;</span>,
</span><span class='line'>          <span class="s2">&quot;HTTP_ACCEPT&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;*/*&quot;</span>,
</span><span class='line'>         <span class="s2">&quot;rack.version&quot;</span> <span class="o">=</span>&gt; <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>0<span class="o">]</span> 1,
</span><span class='line'>        <span class="o">[</span>1<span class="o">]</span> 3
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>           <span class="s2">&quot;rack.input&quot;</span> <span class="o">=</span>&gt; <span class="c">#&lt;StringIO:0x0000010198dda0&gt;,</span>
</span><span class='line'>          <span class="s2">&quot;rack.errors&quot;</span> <span class="o">=</span>&gt; <span class="c">#&lt;IO:&lt;STDERR&gt;&gt;,</span>
</span><span class='line'>     <span class="s2">&quot;rack.multithread&quot;</span> <span class="o">=</span>&gt; <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;rack.multiprocess&quot;</span> <span class="o">=</span>&gt; <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;rack.run_once&quot;</span> <span class="o">=</span>&gt; <span class="nb">false</span>,
</span><span class='line'>      <span class="s2">&quot;rack.url_scheme&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>         <span class="s2">&quot;rack.hijack?&quot;</span> <span class="o">=</span>&gt; <span class="nb">true</span>,
</span><span class='line'>          <span class="s2">&quot;rack.hijack&quot;</span> <span class="o">=</span>&gt; <span class="c">#&lt;Proc:0x0000010198dbe8@/Users/sela/.rvm/gems/ruby-2.1.1/gems/rack-1.6.0/lib/rack/handler/webrick.rb:77 (lambda)&gt;,</span>
</span><span class='line'>       <span class="s2">&quot;rack.hijack_io&quot;</span> <span class="o">=</span>&gt; nil,
</span><span class='line'>         <span class="s2">&quot;HTTP_VERSION&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;HTTP/1.1&quot;</span>,
</span><span class='line'>         <span class="s2">&quot;REQUEST_PATH&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;/foobar&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>localhost - - <span class="o">[</span>19/Feb/2015:23:05:30 PST<span class="o">]</span> <span class="s2">&quot;GET /foobar?baz=true HTTP/1.1&quot;</span> 200 11
</span><span class='line'>- -&gt; /foobar?baz<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>env</code> hash provides some insight into the the facilities that Rack provides. Let&rsquo;s take a look at some of the HTTP
request components:</p>

<ul>
<li><code>REQUEST_URI</code> provides the full request endpoint including protocol and endpoint and query string
parameters.</li>
<li><code>PATH_INFO</code> or <code>REQUEST_PATH</code> provides just the resource.</li>
<li><code>QUERY_STRING</code> breaks out the query string parameters delimited by the <code>&amp;</code> character.</li>
<li><code>REQUEST_METHOD</code> indicates the HTTP verb used for the request. The <code>curl</code> command issues <code>GET</code>
requests by default unless we specify one via the <code>-X &lt;HTTP_VERB&gt;</code> parameter.</li>
<li>Variables that start with <code>HTTP_*</code> correspond to HTTP request headers (e.g. <code>HTTP_ACCEPT</code> = <code>Accept</code>).</li>
</ul>


<p>The <a href="http://www.rubydoc.info/github/rack/rack/master/file/SPEC">Rack interface specification</a> provides more details.
Rack additionally provides middleware facilities like routing to different apps <code>Rack::URLMap</code>, Apache-like logging
<code>Rack::CommonLogger</code>, exception handling <code>Rack::ShowException</code> and <code>Rack::File</code> for serving static assets. There are
numerous rack middleware and utilities available as well via <a href="https://github.com/rack/rack-contrib">rack-contrib</a>.</p>

<p><strong> A Simple DSL </strong></p>

<p>A domain specific language is designed to solve problems for a particular application. In our case we want
to define a simple language to handle HTTP requests. While predominantly a Rails developer, I am enchanted by
Sinatra&rsquo;s minimal and expressive syntax. After digging into
<a href="https://github.com/sinatra/sinatra">Sinatra&rsquo;s source</a> I felt inspired to write a small DSL for fun.</p>

<p>My goal is register a block of code that gets executed when a HTTP request is made to a particular endpoint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">get</span> <span class="s1">&#39;/foobar&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s1">&#39;Hello world at /foobar&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to associate <code>'/foobar'</code> with the block of code, which is defined within the <code>do ... end</code> block. A hash seems
like a convenient data structure for this purpose. First, let&rsquo;s define a class called <code>RackTest</code> that responds to
<code>call</code> with a <code>404</code> not found (we will change this later). Also, let&rsquo;s define an <code>add_callback</code> method that takes the
route as a string and associates it with a block of code in a <code>@callback</code> hash.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">RackTest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_callback</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@callback</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@callback</span><span class="o">[</span><span class="n">route</span><span class="o">]</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;404&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="s1">&#39;Resource not found&#39;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to define a get method outside of the <code>RackTest</code> class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="no">APP</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&rsquo;s put everything together. We need to call the block of code associated with a <code>REQUEST_PATH</code> from the
incoming HTTP request. If no endpoint is registered in the <code>@callback</code> hash, then we want to return a <code>404</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RackTest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_callback</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@callback</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@callback</span><span class="o">[</span><span class="n">route</span><span class="o">]</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Trigger callback if it exists</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;200&#39;</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="n">response</span> <span class="o">=</span> <span class="vi">@callback</span><span class="o">[</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;REQUEST_PATH&#39;</span><span class="o">]].</span><span class="n">call</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Nothing was registered</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">NoMethodError</span>
</span><span class='line'>      <span class="o">[</span><span class="s1">&#39;404&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="s1">&#39;Resource not found&#39;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">APP</span> <span class="o">=</span> <span class="no">RackTest</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="no">APP</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/foobar&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s1">&#39;Hello world at /foobar&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="o">.</span><span class="n">run</span> <span class="no">APP</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s exercise this code via curl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -v localhost:8080/foobar
</span><span class='line'>&gt; GET /foobar HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.30.0
</span><span class='line'>&gt; Host: localhost:8080
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Server: WEBrick/1.3.1 <span class="o">(</span>Ruby/2.1.1/2014-02-24<span class="o">)</span>
</span><span class='line'>&lt; Date: Sat, 21 Feb 2015 05:49:14 GMT
</span><span class='line'>&lt; Content-Length: 22
</span><span class='line'>&lt; Connection: Keep-Alive
</span><span class='line'>&lt;
</span><span class='line'>Hello world at /foobar
</span></code></pre></td></tr></table></div></figure>


<p>Our DSL is pretty limited, let&rsquo;s look into extending it. Minimally, I want to be able to specify the HTTP status code
and content type in the HTTP response headers.</p>

<p>Let&rsquo;s start with how we want to use the DSL in the <code>MyRack</code> class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyRack</span> <span class="o">&lt;</span> <span class="no">RackApp</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/foo&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">status</span> <span class="mi">201</span>
</span><span class='line'>    <span class="s1">&#39;Response from /foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/bar&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">content_type</span> <span class="s1">&#39;application/json&#39;</span>
</span><span class='line'>    <span class="s1">&#39;Response from /bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to understand that the <code>do ... end</code> block is executed in the context of the <code>call(env)</code> method.
Therefore we would see a <code>NoMethodError</code>s for the <code>status</code> and <code>content_type</code> method calls because these methods are not
defined in <code>MyRack</code> or <code>RackApp</code>. We want to direct these method calls to a new class.</p>

<p>This class will serve as a data structure for our HTTP response data. The <code>status</code> and <code>content_type</code> methods will
return stored instance variables or set them depending on whether the parameter is specified. This is purely syntactic
sugar for the DSL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">HttpResponse</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:block</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@block</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>    <span class="vi">@code</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="s1">&#39;text/html&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">code</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@code</span> <span class="k">if</span> <span class="n">code</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@code</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">content_type</span><span class="p">(</span><span class="n">type</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@type</span> <span class="k">if</span> <span class="n">type</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">response_headers</span>
</span><span class='line'>    <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="vi">@type</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s define the <code>RackApp</code> parent class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;http_response&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RackApp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@response</span> <span class="o">=</span> <span class="vi">@registry</span><span class="o">[</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;REQUEST_PATH&#39;</span><span class="o">]]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">not_found</span> <span class="k">if</span> <span class="vi">@response</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="vi">@response</span><span class="o">.</span><span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="o">[</span><span class="vi">@response</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="vi">@response</span><span class="o">.</span><span class="n">response_headers</span><span class="p">,</span> <span class="o">[</span><span class="n">result</span><span class="o">]]</span> <span class="k">unless</span> <span class="vi">@response</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@response</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">not_found</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;404&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s1">&#39;Resource not found&#39;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">HttpResponse</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">registry</span><span class="o">[</span><span class="n">route</span><span class="o">]</span> <span class="o">=</span> <span class="n">response</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">registry</span>
</span><span class='line'>    <span class="vi">@registry</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We return early with a <code>404</code> unless <code>@registry[env['REQUEST_PATH']]</code> was defined. Otherwise, we call the <code>block</code>
stored in our <code>HttpResponse</code> instance. Executing this block may result in <code>status</code> and <code>content_type</code> calls, but in the
context of <code>RackApp</code>. The <code>method_missing</code> method proxies the message to our response instance. The <code>name</code> is the
symbolized name of the method and the <code>args</code> are forwarded to this method.</p>

<p>For simplicity, this minimal example does not differentiate between HTTP verbs. We could easily extend the <code>@registry</code>
hash to do so by adding nesting for each verb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">registry</span><span class="o">[</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;REQUEST_METHOD&#39;</span><span class="o">]][</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;REQUEST_PATH&#39;</span><span class="o">]]</span> <span class="o">=</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could add support for processing query string params via <code>Rack::Request</code> class. There are numerous possible
improvements for our DSL. However, the goal here was not to recreate a robust DSL like Sinatra, but to show how easy
it is to use Rack to get started along that path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freebase Astronomy Gems]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/01/29/freebase-astronomy-gem/"/>
    <updated>2015-01-29T20:34:04-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/01/29/freebase-astronomy-gem</id>
    <content type="html"><![CDATA[<p>With 47 million topics and 2.7 billion facts, Freebase has an imposing amount of community curated data.
Unfortunately, they are <a href="https://plus.google.com/109936836907132434202/posts/bu3z2wVqcQc">closing up shop</a> by mid 2015.
Their plan is to help support the up and coming Wikimedia Foundation&rsquo;s project <a href="http://www.wikidata.org/">Wikidata</a> by
assisting in transferring their data to this project. Given the short amount of time they are online, I wanted
to do a small project using their data sets.</p>

<p>I am interested in astronomy, but found the Freebase JSON data a little unwieldy. I decided to write a pair gems:</p>

<ul>
<li>The <code>astronomy</code> gem facilitates browsing and search of astronomical phenomena. Each topic includes a name,
description, an array of image URLs and a link to the original detailed Freebase data via Google APIs.</li>
<li>The <code>astronomy_engine</code> wraps the <code>astronomy</code> gem and has a web interface and can easily be included
in a Rails project:</li>
</ul>


<p><a href="http://nick-aschenbach.github.io/assets/2015-01-29-freebase-astronomy-gem/images/astronomy_engine.jpg"><img src="http://nick-aschenbach.github.io/assets/2015-01-29-freebase-astronomy-gem/images/astronomy_engine.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>Add the following to your <code>config/routes.rb</code> in your rails app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">AstronomyEngine</span><span class="o">::</span><span class="no">App</span> <span class="o">=&gt;</span> <span class="s1">&#39;/astronomy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds the web page at the root and adds a few additional routes.</p>

<p>Request the list of categories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="o">{</span>APPLICATION_ROOT<span class="o">}</span>/astronomy/categories
</span></code></pre></td></tr></table></div></figure>


<p>Request all topics for a given category:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="o">{</span>APPLICATION_ROOT<span class="o">}</span>/astronomy/categories/Star/topics
</span></code></pre></td></tr></table></div></figure>


<p>Search all topic names and descriptions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="o">{</span>APPLICATION_ROOT<span class="o">}</span>/astronomy/topics?q<span class="o">=</span>cluster
</span></code></pre></td></tr></table></div></figure>


<p>I have a <a href="http://astronomy-engine.herokuapp.com/">sample web app</a> on Heroku available if you want to take a look.
Here are the Github pages for the <a href="https://github.com/nick-aschenbach/astronomy">astronomy</a> gem and
<a href="https://github.com/nick-aschenbach/astronomy-engine">astronomy_engine</a> gem.</p>

<p>Resources:</p>

<ul>
<li>Amazon makes a handful of <a href="https://aws.amazon.com/search?searchQuery=freebase">Freebase Data Dumps</a> freely available.
Also they several other <a href="https://aws.amazon.com/datasets/">public data sets</a>.</li>
<li>Wikidata <a href="http://dumps.wikimedia.org/">data dumps</a> are also available.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Better Worlds With Terragen 3]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2015/01/12/building-better-worlds/"/>
    <updated>2015-01-12T21:13:04-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2015/01/12/building-better-worlds</id>
    <content type="html"><![CDATA[<p>For years I have been interested in modeling terrain. I wrote 2D and 3D fractal terrain generators for fun when I was in school. To help inspire a side project I am working on, I utilized an excellent rendering engine for natural environments and terrain called <a href="http://planetside.co.uk/products/terragen3">Terragen 3</a> from Planetside Software. Here are a couple of screen shots from their <a href="http://planetside.co.uk/galleries/terragen-gallery">image gallery</a>:</p>

<p><a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/lake.jpg"><img src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/lake.jpg" width="300" title="auto" ></a>
<a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/desert.jpg"><img src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/desert.jpg" width="300" title="auto" ></a>
<a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/village.jpg"><img src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/village.jpg" width="300" title="auto" ></a>
<a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/volcano.jpg"><img src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/volcano.jpg" width="300" title="auto" ></a></p>

<!-- more -->


<p>I found the <a href="http://planetside.co.uk/products/download-tg3">free version</a> fairly capable. There are some limitations over the pay version of the software that include restricting resolution, render detail and degree to which anti-aliasing is applied. However, what impressed me most is how easy it is to get started (user interface pictured below left).</p>

<p>When you load the program it creates a simple environment for you. To render this basic scene, click the <code>View-&gt;Render</code> menu. Click <code>Render</code> button and wait. On my Macbook Pro, the rendering took approximately 40 seconds (pictured below right). A shortcut for the Render command is ⌘R. There is a rough view in the upper right that shows an approximation of how the rendered scene will appear.</p>

<p><a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/ui.png"><img src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/ui.png" width="300" title="auto" ></a>
<a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/basic.jpg"><img src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/basic.jpg" width="300" title="auto" ></a></p>

<p>The node network displayed in the lower right part of the interface is a hierarchial display of the scene. This includes Renderers, Cameras and scene elements like clouds, terrain and shaders. Double clicking on the <code>Render 01</code> node in the <code>Renderers</code> pane brings up the properties (to change the resolution, etc). This is limited to a maximum of 1280x900 in the free version.</p>

<p>The same configuration page is also available via the <code>Renderers</code> button on the bar at the top of the window. Adding new elements is easy. For example, to add clouds to the scene click <code>Atmosphere</code> and then the <code>Add cloud layer</code> button. I find the 3D / Volumetric clouds to be more interesting than the 2D ones.</p>

<p>I spent some time following Vladimir Chopine&rsquo;s video tutorials on youtube. This was a good starting point for me:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/HnRFJ4Vptt8" allowfullscreen></iframe></div>


<p>I followed along with a couple of videos and with some trial and error created this rendering:</p>

<p><a href="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/mountain.jpg"><img class="left" src="http://nick-aschenbach.github.io/assets/2015-01-12-building-better-worlds/images/mountain.jpg" title="auto auto" ></a></p>

<p>Here is the Terragen 3 <a href="http://nick-aschenbach.github.io/assets//2015-01-12-building-better-worlds/images/layered_colors3.tgd">file</a> I used to generate the above rendering. Mainly I focused on creating shaders for the elements in the scene (grass, snow, sand). I played with the atmospheric, lighting and cloud elements until I found something that I liked. The rendering took about 11 minutes to complete on my laptop.</p>

<p>Terragen supports import and export FBX, Wavefront OBJ, Lightwave LWO2 and their own native TGO format. It can also import and export heightfield / DEM formats including real geographical data from GeoTIFFs. This makes it easy to communicate with other modeling packages like Rhino, Maya, 3D Studio Max, Blender and Cinema 4D.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Time]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/11/26/game-time/"/>
    <updated>2014-11-26T11:09:34-08:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/11/26/game-time</id>
    <content type="html"><![CDATA[<p>My team laughed quite a bit recently while playing Pictionary at lunchtime over the past several weeks. We have had a few HR (not safe for work) fails in addition to several entertaining missed phrases (including <code>Pizza Gazebo</code> instead of <code>Pizza Hut</code>). We use tablets as our drawing surfaces to save paper, which introduces challenges when trying to draw rapidly. To find words, we used the <a href="https://www.thegamegal.com/word-generator/">Game Gal&rsquo;s word generator</a>.</p>

<p>I love words and decided to look at the word generator implementation to see if I could see if I could use their API to get categorized word lists. I used Chrome&rsquo;s POSTman tool to issue GET requests to the following URL:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.thegamegal.com/wordgenerator/generator.php?game=2&category=6</span></code></pre></td></tr></table></div></figure>


<p>The <code>2</code> is pictionary and <code>6</code> is for the easy category. See the <code>generator.js</code> file or look at the word generator DOM for more details.</p>

<p>I decided to compile a complete list of all words, phrases, actions, characters, movies, songs, etc from the site into a tool that others can use. The GameWords gem was born (<a href="https://github.com/nick-aschenbach/game-words">Github</a>, <a href="http://rubygems.org/gems/game_words">RubyGems</a>). This tool is both a Ruby library and has a command line interface. Below we will investigate the command line tool options:</p>

<p>To install the GameWords gem (which requires Ruby) from a terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install game_words</span></code></pre></td></tr></table></div></figure>


<p>Running the command with no options will show the help:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gamewords
</span><span class='line'>Usage: gamewords [options] game [category]
</span><span class='line'>    -l, --list                       List games
</span><span class='line'>    -c, --categories GAME            List categories for a GAME
</span><span class='line'>    -r, --random                     Show one random word or phrase for a GAME [CATEGORY]
</span><span class='line'>    -v, --version                    Show the version
</span><span class='line'>    -h, --help                       Display help screen</span></code></pre></td></tr></table></div></figure>


<p>To find a Pictionary word for all categories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gamewords pictionary</span></code></pre></td></tr></table></div></figure>


<p>Show all words for a specific game category:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gamewords catchphrase people</span></code></pre></td></tr></table></div></figure>


<p>Show a list of games with the <code>-l</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gamewords -l</span></code></pre></td></tr></table></div></figure>


<p>Show a list of categories for a game via the <code>-c</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gamewords -c pictionary</span></code></pre></td></tr></table></div></figure>


<p>Show a single random word or phrase use the <code>-r</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gamewords -r charades actions</span></code></pre></td></tr></table></div></figure>


<p>The holidays are a great chance to catch up with family and close friends. If you like word games perhaps this library can provide some incentive to either play or write your own word games. There are almost 5,000 words, phrases, songs, movies, characters, actions and sayings.</p>

<p>Happy Holidays!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pet Cemetery Headstones]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/10/25/pet-cemetery-headstones/"/>
    <updated>2014-10-25T13:37:23-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/10/25/pet-cemetery-headstones</id>
    <content type="html"><![CDATA[<p>This year we decided to take on a small project to help decorate the front yard for Halloween. We were sad to lose our dear orange tabby cat Frank this July. To memorialize Frank and our pets from years past, we decided to create a small faux pet cemetary in the front yard.</p>

<p>Here are the raw materials we used:</p>

<ul>
<li>1&#8221; x 48&#8221; x 96&#8221; Owens Corning FOAMULAR insulation (about $20, Home Depot)</li>
<li>Grey and black spray primer (about $6 each)</li>
<li>5x Paint mixing sticks (free, Home Depot)</li>
<li>10x 1 &frac14;&#8221; long wood screws</li>
</ul>


<p><strong>Cutting the foam</strong></p>

<!-- more -->


<p>My wife who is a graphic designer created the geometry for the project <a href="http://nick-aschenbach.github.io/assets/2014-10-25-pet-cemetery-headstones/files/petcemetary.zip">download here</a>. The PDF files can be enlarged to a desired size on paper and then cut out with a pair of scissors. You can print large format sheets at a copy center or use regular copier paper taped together to form a template. I used the PDF files in my CAD / CAM software and cut the patterns out on my CNC router.</p>

<p><img class="left" src="http://nick-aschenbach.github.io/assets/2014-10-25-pet-cemetery-headstones/images/pre-finished.jpg" width="300" title="auto Pre-finished Headstones" ></p>

<p>The Corning foam can be fabricated with a utility knife, hot knife or a router. The best cut can probably be achieved with a small router or a Dremel tool. In addition, I found that the material was hand-sandable. I would experiment to find which tools work best for you. This <a href="http://insulation.owenscorning.com/assets/0/428/429/465/07b971b3-5112-46b7-a783-1f7132b59897.pdf">guide</a> from the manufacturer has some fabrication tips. If I did the project again, I would consider hand drawing the letters / designs or using stencils.</p>

<p><em>Transportation note:</em> We had a gentleman at Home Depot cut the foam sheet so it would fit in the back of my car. The guide shows a trick for breaking the sheet. You can take a box cutter and run it along a straight-edge (a 2&#8221; x 4&#8221; in our case) a couple of times. Then you can break the sheet along the score line by pushing down in one swift motion over the edge of a table (or in our case a stack of plywood sheet).</p>

<p><strong> Painting the headstones </strong></p>

<p><img class="right" src="http://nick-aschenbach.github.io/assets/2014-10-25-pet-cemetery-headstones/images/stake.jpg" width="400" title="auto Stake with Headstone" ></p>

<p>Our goal was to give the headstones the an aged, dirty appearance. We started with the black spray primer with long strokes perhaps 6-12&#8221; away from the headstone. Start with short bursts of spray and take care not to stay in one spot. Cover the front, back and the edges until the purple color of the foam is not noticeable. Let dry and apply another coat as necessary. Then we applied the grey primer in streaks around the head stones. You may want to alternate between the grey and black primer to achieve the desired effect.</p>

<p><strong> Installing the headstones </strong></p>

<p><img class="left" src="http://nick-aschenbach.github.io/assets/2014-10-25-pet-cemetery-headstones/images/collage.jpg" width="400" title="auto Headstone Collage" ></p>

<p>I cut the paint mixing sticks on a compound miter saw into the form of a V on one end (pictured above). This allows the sticks to be used as a stake. These were driven several inches deep into the ground (perhaps 5-7&#8221;). I used a small 3-pound sledge to drive these into the group taking care not to split the wood. You may consider putting a small piece of wood behind the stake to help distribute the load a little bit. This should help to minimize splitting.</p>

<p>After the stake was in the ground, I drilled a pilot hole through each stake about 1-2&#8221; from the top. Then I centered the headstone in front of each stake. While pushing down slightly on the headstone, I drove a wood screw from the front face about 1&#8221; from the bottom back into the stake through the foam. Then from the back, I put a screw in through the pilot hole into the back of the foam. Take care to drill slowly and softly as it will be pretty easy to drive a screw right through the foam.</p>

<p>Have fun time decorating this year and have a safe and happy Halloween!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Lapse at 8,600 Feet]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/10/09/time-lapse-at-8600-feet/"/>
    <updated>2014-10-09T07:47:58-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/10/09/time-lapse-at-8600-feet</id>
    <content type="html"><![CDATA[<p>While on vacation near <a href="https://www.google.com/maps/place/Devils+Thumb+Ranch+Resort+%26+Spa/@39.9662913,-105.7840392,17z/data=!3m1!4b1!4m2!3m1!1s0x876a334c90923d2f:0xa2ca7e1ac5aa7ad9">Devil&rsquo;s Thumb Ranch</a> I decided to try some time lapse photography. I wrote a bash script that took pictures on a laptop a few years ago. I ran this script using cron, but was looking for something with finer grained control. I found a <a href="http://tenderlovemaking.com/2014/03/26/webcam-photos-with-ruby.html">Tenderlovemaking post</a> that shows how to take web cam photos using Ruby with the AVCapture framework. Note that this appears to only work on OSX.</p>

<p>I modified the script from Tenderlove&rsquo;s <code>av_capture</code> gem&rsquo;s <a href="https://github.com/tenderlove/av_capture">github page</a>:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;av_capture&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="no">AVCapture</span><span class="o">::</span><span class="no">Session</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">dev</span>     <span class="o">=</span> <span class="no">AVCapture</span><span class="o">.</span><span class="n">devices</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:video?</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="n">run_with</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">connection</span><span class="o">|</span>
</span><span class='line'>  <span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;img_</span><span class="si">#{</span><span class="n">counter</span><span class="si">}</span><span class="s2">.jpg&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="n">connection</span><span class="o">.</span><span class="n">capture</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I left fill with zeros so that the files will be <code>img_0000.jpg</code>, <code>img_0001.jpg</code> &hellip; If you want to increase the number of times we take photos (let&rsquo;s call it N) then change the <code>4</code> on line 8 to be <code>log_10(N).ceil</code>. So if we want to take 15,000 photos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we ran the script and generated a ton of sequentially numbered photos, how do we turn them into a movie? I used FFMPEG on a few projects in graduate school a few years ago and figured that it would be the right tool for the job.</p>

<p>To install it on OSX (requires brew):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ffmpeg</span></code></pre></td></tr></table></div></figure>


<p>Now to turn the photos into a movie:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ffmpeg -r 60 -i img_%04d.jpg output.mp4</span></code></pre></td></tr></table></div></figure>


<p>The <code>-r 60</code> flag sets the video frame rate to 60 frames per second.</p>

<p>I ran this script for about 3.5 hours starting in the early afternoon on October 6th facing towards Devil&rsquo;s Thumb, a local geological feature. Here is the result:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/k9uW1tmKZTo" allowfullscreen></iframe></div>


<p>I started with 30 second intervals, but found that there was too much movement between frames. I changed the script to use a 5 second delay, which seemed to result in smoother transitions. Also I used YouTube&rsquo;s image stabilization post-processing feature. This is why the video appears to pan around a little. Occasionally the web cam took pictures that appeared to be too light. These appear as a white flash in the video. I identified these and copied the next image in the sequence over the white image.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Gem for RubyGems.org]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/09/29/building-a-gem-for-rubygems-dot-org/"/>
    <updated>2014-09-29T18:49:06-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/09/29/building-a-gem-for-rubygems-dot-org</id>
    <content type="html"><![CDATA[<p>We are going through some large code refactors at work and are building <a href="http://guides.rubyonrails.org/engines.html">rails engines</a>. This requires creating apps within our main app. Each sub-app resides in its own gem and is typically mounted or consumed in some way by the host application. While I work on several gems for different projects at work, I had never developed one from scratch and submitted it to <a href="http://rubygems.org/">RubyGems</a>. I took some previous work on a <a href="http://nick-aschenbach.github.io/blog/2014/07/20/text-messaging-made-easy-with-twilio/">SMS Scrabble cheater app</a> to help motivate the project.</p>

<p>Developing the skeleton for a gem is extremely easy:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle gem foobar</span></code></pre></td></tr></table></div></figure>


<p>Several files are created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create  foobar/Rakefile
</span><span class='line'>create  foobar/LICENSE.txt
</span><span class='line'>create  foobar/README.md
</span><span class='line'>create  foobar/.gitignore
</span><span class='line'>create  foobar/foobar.gemspec
</span><span class='line'>create  foobar/lib/foobar.rb
</span><span class='line'>create  foobar/lib/foobar/version.rb
</span><span class='line'>Initializing git repo in /Users/sela/workspace/foobar</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at the gemspec file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'><span class="n">lib</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span> <span class="k">unless</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;foobar/version&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">spec</span><span class="o">|</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">name</span>          <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="no">Foobar</span><span class="o">::</span><span class="no">VERSION</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Nick Aschenbach&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">email</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;nick.aschenbach@gmail.com&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a short summary. Required.}</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a longer description. Optional.}</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">homepage</span>      <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">license</span>       <span class="o">=</span> <span class="s2">&quot;MIT&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">files</span>         <span class="o">=</span> <span class="sb">`git ls-files -z`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\x0</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^bin/}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">test_files</span>    <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^(test|spec|features)/}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">require_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lib&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;bundler&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.6&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rake&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also a handy <code>README.md</code> file is created that shows users how to install the gem using bundler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TODO: Write a gem description
</span><span class='line'>
</span><span class='line'>## Installation
</span><span class='line'>
</span><span class='line'>Add this line to your application's Gemfile:
</span><span class='line'>
</span><span class='line'>    gem 'foobar'
</span><span class='line'>
</span><span class='line'>And then execute:
</span><span class='line'>
</span><span class='line'>    $ bundle
</span><span class='line'>
</span><span class='line'>Or install it yourself as:
</span><span class='line'>
</span><span class='line'>    $ gem install foobar
</span><span class='line'>
</span><span class='line'>## Usage
</span><span class='line'>
</span><span class='line'>TODO: Write usage instructions here
</span><span class='line'>
</span><span class='line'>## Contributing
</span><span class='line'>
</span><span class='line'>1. Fork it ( https://github.com/[my-github-username]/foobar/fork )
</span><span class='line'>2. Create your feature branch (`git checkout -b my-new-feature`)
</span><span class='line'>3. Commit your changes (`git commit -am 'Add some feature'`)
</span><span class='line'>4. Push to the branch (`git push origin my-new-feature`)
</span><span class='line'>5. Create a new Pull Request</span></code></pre></td></tr></table></div></figure>


<p>I used this template for my <code>scrabble_score</code> gem. The full source code is available on <a href="https://github.com/nick-aschenbach/scrabble-score">Github</a>. The project is extremely simple and has the following structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Gemfile
</span><span class='line'>├── Gemfile.lock
</span><span class='line'>├── LICENSE.txt
</span><span class='line'>├── README.md
</span><span class='line'>├── assets
</span><span class='line'>│   └── dictionary.txt
</span><span class='line'>├── lib
</span><span class='line'>│   ├── scrabble_score
</span><span class='line'>│   │   ├── dictionary.rb
</span><span class='line'>│   │   ├── letters.rb
</span><span class='line'>│   │   ├── version.rb
</span><span class='line'>│   │   └── word_finder.rb
</span><span class='line'>│   └── scrabble_score.rb
</span><span class='line'>├── scrabble_score.gemspec
</span><span class='line'>└── spec
</span><span class='line'>    ├── assets
</span><span class='line'>    │   └── dictionary.txt
</span><span class='line'>    ├── lib
</span><span class='line'>    │   └── scrabble_score
</span><span class='line'>    │       ├── dictionary_spec.rb
</span><span class='line'>    │       ├── letters_spec.rb
</span><span class='line'>    │       └── word_finder_spec.rb
</span><span class='line'>    └── spec_helper.rb
</span><span class='line'>
</span><span class='line'>7 directories, 16 files</span></code></pre></td></tr></table></div></figure>


<p>After getting my specs green and playing around with the code a bit, I went to generate the gem. First, let&rsquo;s upgrade to the latest RubyGems version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem update --system</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s build the gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem build scrabble_score.gemspec</span></code></pre></td></tr></table></div></figure>


<p>The first time I ran this tool I received a handful of warnings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARNING:  no homepage specified
</span><span class='line'>WARNING:  open-ended dependency on rspec (&gt;= 0, development) is not recommended
</span><span class='line'>  if rspec is semantically versioned, use:
</span><span class='line'>    add_development_dependency 'rspec', '~&gt; 0'
</span><span class='line'>WARNING:  open-ended dependency on simplecov (&gt;= 0, development) is not recommended
</span><span class='line'>  if simplecov is semantically versioned, use:
</span><span class='line'>    add_development_dependency 'simplecov', '~&gt; 0'
</span><span class='line'>WARNING:  See http://guides.rubygems.org/specification-reference/ for help
</span><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: scrabble_score
</span><span class='line'>  Version: 0.1.0
</span><span class='line'>  File: scrabble_score-0.1.0.gem</span></code></pre></td></tr></table></div></figure>


<p>For the homepage I used the project&rsquo;s Github repository. I also added versions to the development dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec.add_development_dependency 'bundler', '~&gt; 1.6'
</span><span class='line'>spec.add_development_dependency 'rspec', '3.0.0'
</span><span class='line'>spec.add_development_dependency 'simplecov', '0.9.1'</span></code></pre></td></tr></table></div></figure>


<p>I deleted the <code>scrabble_score-0.1.0.gem</code> file and ran the <code>gem build</code> command again. Here is the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: scrabble_score
</span><span class='line'>  Version: 0.1.0
</span><span class='line'>  File: scrabble_score-0.1.0.gem</span></code></pre></td></tr></table></div></figure>


<p>Everything looks good, so I proceeded with the last step by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem push scrabble_score-0.1.0.gem </span></code></pre></td></tr></table></div></figure>


<p>Which created the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter your RubyGems.org credentials.
</span><span class='line'>Don't have an account yet? Create one at https://rubygems.org/sign_up
</span><span class='line'>   Email:   nick.aschenbach@gmail.com
</span><span class='line'>Password:   
</span><span class='line'>
</span><span class='line'>Signed in.
</span><span class='line'>Pushing gem to https://rubygems.org...
</span><span class='line'>Successfully registered gem: scrabble_score (0.1.0)</span></code></pre></td></tr></table></div></figure>


<p>My experience creating a gem for RubyGems was a pleasant one. Please do a quick search to ensure that your gem name is unique before you get started. There are many guides out there for how to write gems. It is a good idea to take a look at one or two of these before getting started.</p>

<p>Happy gem cutting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protected and Private Visibility Modifiers and Inheritance in Ruby]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/08/30/ruby-inherited-visibility-modifiers-protected-and-private/"/>
    <updated>2014-08-30T09:01:20-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/08/30/ruby-inherited-visibility-modifiers-protected-and-private</id>
    <content type="html"><![CDATA[<p>During a recent code review at work, I was surprised by how Ruby handles <code>private</code> and <code>protected</code> method visibility modifiers in derived classes. The behavior is distinct from visibility modifiers in other languages like Java. Specifically, you can call a private parent class method as is demonstrated by the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span> <span class="o">&lt;</span> <span class="n">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>    <span class="n">foo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I did some experimentation in the irb console. As expected, one may not call the <code>private</code> method foo on an instance of A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="kp">private</span> <span class="nb">method</span> <span class="sb">`foo&#39; called for #&lt;A:0x00000102a0b498&gt;</span>
</span><span class='line'><span class="sb">  from (irb):7</span>
</span><span class='line'><span class="sb">  from /Users/sela/.rvm/rubies/ruby-2.1.1/bin/irb:11:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What surprised me is that in the child class <code>B</code> that we can call <code>foo</code> on the parent class. Again, back to irb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span>
</span><span class='line'><span class="n">foobar</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Class B is calling a private method on class A, which seems to break with my expectations about encapsulation.</p>

<p>Time for some digging. I read through a couple of articles and found a draft of the Ruby language specification. Section 13.3.5 discusses method visibility. While not an official spec, here is what it says about private methods:</p>

<blockquote><p>A private method cannot be invoked with an explicit receiver, i.e., a private method cannot be invoked if a primary-expression or a chained-method-invocation occurs at the position which corresponds to the method receiver in the method invocation, except for a method invocation of any of the following forms where the primary-expression is a self-expression.</p><p>- single-method-assignment<br/>- abbreviated-method-assignment<br/>- single-indexing-assignment<br/>- abbreviated-indexing-assignment</p><footer><strong>IPA Ruby Standardization WG Draft</strong> <cite>Programming Languages - Ruby</cite></footer></blockquote>


<p>The way I interpret the spec is that a private method can be called with an implicit receiver (read object). This is why calling <code>foo</code> from method <code>bar</code> above is allowable. Invoking a method with an explicit receiver is not allowed. This is why <code>A.new.foo</code> results in a <code>NoMethodError</code>.</p>

<p>The following code may clarify the difference between calling a method with an implicit vs. explicit receiver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">baz</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;foobaz&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span> <span class="o">&lt;</span> <span class="n">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>    <span class="c1"># Implicit</span>
</span><span class='line'>    <span class="n">baz</span>
</span><span class='line'>    <span class="n">foo</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Explicit</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">baz</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">foo</span>    <span class="c1"># Results in NoMethodError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that now we see that the <code>protected</code> method can be called explicitly, while the <code>private</code> method cannot. Let&rsquo;s exercise the above code in irb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span>
</span><span class='line'><span class="n">foobaz</span>
</span><span class='line'><span class="n">foobar</span>
</span><span class='line'><span class="n">foobaz</span>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="kp">private</span> <span class="nb">method</span> <span class="sb">`foo&#39; called for #&lt;B:0x000001019b3460&gt;</span>
</span><span class='line'><span class="sb">  from (irb):23:in `</span><span class="n">bar</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  from (irb):26</span>
</span><span class='line'><span class="s1">  from /Users/sela/.rvm/rubies/ruby-2.1.1/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>References:</p>

<ul>
<li><a href="https://www.ipa.go.jp/osc/english/ruby/">Ruby Draft Specification</a></li>
<li><a href="http://tenderlovemaking.com/2012/09/07/protected-methods-and-ruby-2-0.html">Tenderlovemaking blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Autocompletion With Tries]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/08/19/super-fast-autocomplete-with-tries/"/>
    <updated>2014-08-19T19:50:17-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/08/19/super-fast-autocomplete-with-tries</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://nick-aschenbach.github.io/assets/2014-08-19-super-fast-autocomplete-with-tries/images/trie.png" width="200" title="auto Trie Graph" ></p>

<p>Tries (pronounced &lsquo;try&rsquo; or &lsquo;trie&rsquo; as in retrieval) is an ordered data structure often used to store strings. It is a type of tree where the decoration on each node represents the position of the element being stored. If we store a string, then a depth first search of the tree to a leaf node will visit characters that make up that string.</p>

<p>Tries are great for super-fast autocomplete search. A breadth first search from any given point in the tree will find an exact match (if it exists), then matches one character away, then two and so on down the tree.</p>

<p>To build a trie we will need a recursively defined node called <code>TrieNode</code>. Let&rsquo;s take a look at some Ruby code that we will use to build a Trie:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">TrieNode</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">decoration</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@decoration</span> <span class="o">=</span> <span class="n">decoration</span>
</span><span class='line'>    <span class="vi">@children</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">addLetters</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addLettersRecursively</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">letters</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">addLettersRecursively</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">full_word</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@full_word</span> <span class="o">=</span> <span class="n">full_word</span> <span class="ow">and</span> <span class="k">return</span> <span class="k">if</span> <span class="n">letters</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">first_letter</span> <span class="o">=</span> <span class="n">letters</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@children</span><span class="o">[</span><span class="n">first_letter</span><span class="o">]</span> <span class="o">=</span> <span class="no">TrieNode</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">first_letter</span><span class="p">)</span> <span class="k">unless</span> <span class="vi">@children</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">first_letter</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@children</span><span class="o">[</span><span class="n">first_letter</span><span class="o">].</span><span class="n">addLettersRecursively</span><span class="p">(</span><span class="n">letters</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">full_word</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It has a few instance variables including a <code>decoration</code> and a <code>full_word</code>. We store child relationships by recursively adding new <code>TrieNodes</code> in a <code>children</code> hash peeling off one letter at a time. I could have used a single method for the recursion, but use a <code>addLetters</code> method as a driver for the <code>addLettersRecursively</code> method.</p>

<p>Finding a node in the Trie follows the same pattern as adding letters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">findNode</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">self</span> <span class="k">if</span> <span class="n">letters</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="vi">@children</span><span class="o">[</span><span class="n">letters</span><span class="o">[</span><span class="mi">0</span><span class="o">]].</span><span class="n">findNode</span><span class="p">(</span><span class="n">letters</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@children</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">letters</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that not all nodes in the tree represent member strings that are stored in the Trie. We marked the Trie member nodes with the <code>full_word</code> instance variable above. We need the <code>findNode</code> method for traversals as we will see in a minute.</p>

<p>Now we can implement the Trie itself. It maintains the root node of the tree and has facilities to insert, membership and search:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Trie</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">words</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@root_node</span> <span class="o">=</span> <span class="no">TrieNode</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="vi">@root_node</span><span class="o">.</span><span class="n">addLetters</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@root_node</span><span class="o">.</span><span class="n">addLetters</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contains?</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="vi">@root_node</span><span class="o">.</span><span class="n">findNode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">node</span> <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">word</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">letters</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">queue</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="vi">@root_node</span><span class="o">.</span><span class="n">findNode</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">[]</span> <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">word</span> <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">word</span>
</span><span class='line'>    <span class="n">queue</span> <span class="o">&lt;&lt;</span> <span class="n">node</span>
</span><span class='line'>    <span class="k">until</span> <span class="n">queue</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child_node</span><span class="o">|</span>
</span><span class='line'>        <span class="n">word</span> <span class="o">=</span> <span class="n">child_node</span><span class="o">.</span><span class="n">word</span>
</span><span class='line'>        <span class="n">words</span> <span class="o">&lt;&lt;</span> <span class="n">word</span> <span class="k">unless</span> <span class="n">word</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="n">queue</span> <span class="o">&lt;&lt;</span> <span class="n">child_node</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">words</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The search method maintains a list of found <code>words</code> and a <code>queue</code> for a breadth first search of the Trie. We use the <code>shift</code> and <code>&lt;&lt;</code> operators to get queue first-in-first-out behavior. Calling search without specifying letters will result in full search for all members in the Trie.</p>

<p>The full source and dictionary is available on GitHub:</p>

<p><a href="https://github.com/nick-aschenbach/trie-autocomplete">https://github.com/nick-aschenbach/trie-autocomplete</a></p>

<p><em>Performance</em></p>

<p>I used a database with about 210K words and did some rough, informal calculations to compare performance between arrays, hashes and my trie implementation. The prefix search is finding all words that started with a substring. Membership is for finding one exact string. Here is what I found:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prefix search (1000x repetitions)
</span><span class='line'>Trie: 0.034 seconds
</span><span class='line'>Array: 51.3 seconds
</span><span class='line'>Hash: 91.85 seconds
</span><span class='line'>
</span><span class='line'>Membership search (100,000x)
</span><span class='line'>Trie: 0.22 seconds
</span><span class='line'>Array: 1580 seconds (estimated: 10,000x took 158 seconds)
</span><span class='line'>Hash: 0.027 seconds
</span><span class='line'>
</span><span class='line'>Insertion (100x)
</span><span class='line'>Trie: 88.6 seconds
</span><span class='line'>Array: 0.000023 seconds
</span><span class='line'>Hash: 7.69 seconds</span></code></pre></td></tr></table></div></figure>


<p>Prefix search performance appears to be efficient compared to arrays and hashes. Membership search appears to be a little slower than hashes. Array membership requires a full search of the array in the worst case O(N). Hash lookup is expected constant time performance. Trie membership is O(M) where M is the number of characters in the string. Insertion performance is very slow (probably due to all of the hashes being generated with this implementation). Typical use of this data structure is for search and insertion should be relatively rare.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popularity Trends in Programming Languages]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/08/02/programming-languages-popularity-trends/"/>
    <updated>2014-08-02T11:18:06-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/08/02/programming-languages-popularity-trends</id>
    <content type="html"><![CDATA[<p>Full disclosure: I am a Ruby and Java developer.</p>

<p>Everyone has their favorite pet languages (myself included) and I realize that this is a topic that evokes some feelings among my peers. In recent years, I strove to be more agnostic about tools and languages. While I try to be careful about making predictions, the languages and tools that are relevant now may fall out of favor in the industry in a few years. I&rsquo;ll try stick to what I discovered, but I realize that my perception is colored by my experience.</p>

<p>I reviewed several indexes and articles including <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE</a>, <a href="http://lang-index.sourceforge.net/">Transparent Language Popularity Index</a>, <a href="http://spectrum.ieee.org/static/interactive-the-top-programming-languages">IEEE Spectrum: Top Programming Languages</a>, <a href="https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language">PopularitY of Programming Language Index</a>, <a href="http://redmonk.com/sogrady/2014/01/22/language-rankings-1-14/">RedMonk Programming Language Rankings</a>, <a href="http://langpop.corger.nl/">Programming Language Popularity Chart</a> and <a href="http://redmonk.com/dberkholz/2014/05/02/github-language-trends-and-the-fragmenting-landscape/">GitHub Language Trends and Fragmenting Landscape</a></p>

<p>While there was correlation between highly ranked languages between the indexes, none of them were the same. Several metrics were used including number of open source projects, number of lines of code, number of tracked bugs / issues, number of tutorials and numbers of search engine searches. The list goes on and on. How these metrics were weighted had a big impact on the overall ranking results.</p>

<p><img class="left" src="http://dberkholz-media.redmonk.com/dberkholz/files/2014/05/github_new_users_repos_issues_multiplot_composite_simple.png" width="450" title="auto New GitHub Repos" ></p>

<p>In alphabetical order some of the most highly ranked languages are C, C#, C++, Java, JavaScript, Objective-C, PHP, Perl, Python, Ruby and Visual Basic. About half the indexes I reviewed had C and Java in the top two spots.</p>

<!-- more -->


<p>Because there is no objective measurement of programming language popularity, the exact rank seemed less important to me than how things <a href="http://redmonk.com/dberkholz/2014/05/02/github-language-trends-and-the-fragmenting-landscape/">change over time</a> (see graph). Another approach that I liked was the use of <a href="http://sogrady-media.redmonk.com/sogrady/files/2014/01/lang-rank-114-wm.png">scatter plots</a>.</p>

<p>I found Donnie Berkholz&rsquo;s analysis of programming language use on GitHub particularly insightful. He looks at new GitHub repos, new issues and new users as a function of time. Before we go deeper into the numbers, it is important to mention that GitHub was embraced by the Ruby community early on and the apparent drop in Ruby projects actually indicates that GitHub was adopted by the developer community at large over the past five years.</p>

<p>Overall language trends (looking at GitHub issues):</p>

<ul>
<li>While JavaScript issues are increasing, the trend is decelerating. It may stabilize at around 25% of total issues on GitHub</li>
<li>Ruby has seen a big decline and appears to be reaching 10% of issues</li>
<li>Java and PHP have stabilized at 10% of issues</li>
<li>Python has dropped from 15% to about 10% of issues since 2008/2009. It&rsquo;s unclear if this number has stabilized.</li>
</ul>


<p>He also points out that C# and Objective-C are widely used, but do not show up in his data because developers from those communities have not embraced GitHub to the same degree as some others. This is corroborated by <a href="http://langpop.corger.nl/">data</a> that indicates while C# is discussed widely on Stack Overflow, it is not correlated as strongly with lines of code on GitHub as are other languages like Java and JavaScript:</p>

<p>Language    | Stack Overflow | GitHub          | Ratio
&mdash;&mdash;&mdash;&ndash; | &mdash;&mdash;&mdash;&mdash;&ndash; | &mdash;&mdash;&mdash;&mdash;&mdash;-|&mdash;&mdash;-
C#          | 679,776        | 2,469,334,797   | 3,632
Java        | 687,426        | 7,090,897,887   | 10,315
JavaScript  | 676,383        | 15,664,918,541  | 23,160
<br/></p>

<p>The ratio is the number of lines of code on GitHub relative to the number of Stack Overflow comments. All three languages have a similar number of comments on Stack, but have very different ratios.</p>

<p>The article closes by suggesting that we have moved towards an increasingly fragmented programming language landscape. With the rise of domain specific languages and the increasing reliance on web technologies, it will be fascinating to see what programming languages will dominate in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Quiz]]></title>
    <link href="http://nick-aschenbach.github.io/blog/2014/07/30/ruby-quiz/"/>
    <updated>2014-07-30T08:29:53-07:00</updated>
    <id>http://nick-aschenbach.github.io/blog/2014/07/30/ruby-quiz</id>
    <content type="html"><![CDATA[<p>I listen to the <a href="http://rubyrogues.com/">Ruby Rogues</a> Podcasts on my way to work in the morning. A number of episodes focus on learning, education and keeping your skills sharp. I learn best by working on small projects to enhance my understanding of different aspects of a programming language. I was looking for some non-trivial example problems to work on and found the <a href="http://rubyquiz.com/">Ruby Quiz</a>.</p>

<p>At the time of this blog post, the website has over Ruby 150 programming problems with several candidate solutions. The best of these were compiled by Ruby Rogue James Edward Gray II (<a href="https://twitter.com/JEG2">Twitter</a>, <a href="https://github.com/JEG2">Github</a>, <a href="http://graysoftinc.com/">Blog</a>). While the book is out of print, I found a digital copy available on <a href="http://it-ebooks-search.info/search?q=ruby%20quiz">IT Books</a>.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
</feed>
